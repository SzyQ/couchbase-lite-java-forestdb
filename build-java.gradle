apply plugin: "c"
apply plugin: "cpp"
apply plugin: "java"
apply plugin: "maven"

version = System.getenv("MAVEN_UPLOAD_VERSION")

////////////////////////////////////////////
// For Java
////////////////////////////////////////////

sourceSets {
    main {
        java{
            srcDir 'vendor/cbforest/Java/src'
        }
    }
    test{
        java{
            srcDir 'vendor/cbforest/Java/src'
        }
    }
}


////////////////////////////////////////////
// For Native
////////////////////////////////////////////
task generateJniHeaders(type: Exec, description: 'Gnerate JNI C header files') {
    def classpath      = "vendor/cbforest/Java/src"
    def nativeIncludes = "vendor/cbforest/Java/jni"
    commandLine "javah", "-d", "$nativeIncludes", "-classpath", "$classpath",
            "com.couchbase.cbforest.Database",
            "com.couchbase.cbforest.Document",
            "com.couchbase.cbforest.DocumentIterator",
            "com.couchbase.cbforest.ForestException",
            "com.couchbase.cbforest.Logger",
            "com.couchbase.cbforest.QueryIterator",
            "com.couchbase.cbforest.View"

    dependsOn classes
}

classes.finalizedBy generateJniHeaders

task cleanJniHeaders(type: Delete, description: 'Clean JNI C header files') {
    delete "vendor/cbforest/Java/jni/com_couchbase_cbforest_Database.h"
    delete "vendor/cbforest/Java/jni/com_couchbase_cbforest_Document.h"
    delete "vendor/cbforest/Java/jni/com_couchbase_cbforest_DocumentIterator.h"
    delete "vendor/cbforest/Java/jni/com_couchbase_cbforest_ForestException.h"
    delete "vendor/cbforest/Java/jni/com_couchbase_cbforest_Logger.h"
    delete "vendor/cbforest/Java/jni/com_couchbase_cbforest_QueryIterator.h"
    delete "vendor/cbforest/Java/jni/com_couchbase_cbforest_View.h"
}
clean.dependsOn 'cleanJniHeaders'
model {
    platforms {
        osx_x86 {
            architecture "x86"
            operatingSystem "osx"
        }
        osx_x86_64 {
            architecture "x86_64"
            operatingSystem "osx"
        }
        linux_x86 {
            architecture "x86"
            operatingSystem "linux"
        }
        linux_x86_64 {
            architecture "x86_64"
            operatingSystem "linux"
        }
        linux_amd64 {
            architecture "amd64"
            operatingSystem "linux"
        }
        windows_x86 {
            architecture "x86"
            operatingSystem "windows"
        }
        windows_x86_64 {
            architecture "x86_64"
            operatingSystem "windows"
        }
        windows_amd64 {
            architecture "amd64"
            operatingSystem "windows"
        }
    }

    toolChains {
        clang(Clang)
        visualCpp(VisualCpp)
        gcc(Gcc)
    }

    components {
        Tokenizer(NativeLibrarySpec) {
            targetPlatform "osx_x86"
            targetPlatform "osx_x86_64"
            //targetPlatform "linux_x86" // gcc-multilib/g++-mutlilib does not work with clang
            targetPlatform "linux_x86_64"
            targetPlatform "linux_amd64"
            targetPlatform "windows_x86"
            targetPlatform "windows_x86_64"
            sources {
                c {
                    source {
                        srcDir "vendor/cbforest/vendor/sqlite3-unicodesn"
                        include "fts3_unicode2.c",
                                "fts3_unicodesn.c",
                                "libstemmer_c/runtime/api_sq3.c",
                                "libstemmer_c/runtime/utilities_sq3.c",
                                "libstemmer_c/libstemmer/libstemmer_utf8.c",
                                "libstemmer_c/src_c/stem_ISO_8859_1_danish.c",
                                "libstemmer_c/src_c/stem_ISO_8859_1_dutch.c",
                                "libstemmer_c/src_c/stem_ISO_8859_1_english.c",
                                "libstemmer_c/src_c/stem_ISO_8859_1_finnish.c",
                                "libstemmer_c/src_c/stem_ISO_8859_1_french.c",
                                "libstemmer_c/src_c/stem_ISO_8859_1_german.c",
                                "libstemmer_c/src_c/stem_ISO_8859_1_hungarian.c",
                                "libstemmer_c/src_c/stem_ISO_8859_1_italian.c",
                                "libstemmer_c/src_c/stem_ISO_8859_1_norwegian.c",
                                "libstemmer_c/src_c/stem_ISO_8859_1_porter.c",
                                "libstemmer_c/src_c/stem_ISO_8859_1_portuguese.c",
                                "libstemmer_c/src_c/stem_ISO_8859_1_spanish.c",
                                "libstemmer_c/src_c/stem_ISO_8859_1_swedish.c",
                                "libstemmer_c/src_c/stem_ISO_8859_2_romanian.c",
                                "libstemmer_c/src_c/stem_KOI8_R_russian.c",
                                "libstemmer_c/src_c/stem_UTF_8_danish.c",
                                "libstemmer_c/src_c/stem_UTF_8_dutch.c",
                                "libstemmer_c/src_c/stem_UTF_8_english.c",
                                "libstemmer_c/src_c/stem_UTF_8_finnish.c",
                                "libstemmer_c/src_c/stem_UTF_8_french.c",
                                "libstemmer_c/src_c/stem_UTF_8_german.c",
                                "libstemmer_c/src_c/stem_UTF_8_hungarian.c",
                                "libstemmer_c/src_c/stem_UTF_8_italian.c",
                                "libstemmer_c/src_c/stem_UTF_8_norwegian.c",
                                "libstemmer_c/src_c/stem_UTF_8_porter.c",
                                "libstemmer_c/src_c/stem_UTF_8_portuguese.c",
                                "libstemmer_c/src_c/stem_UTF_8_romanian.c",
                                "libstemmer_c/src_c/stem_UTF_8_russian.c",
                                "libstemmer_c/src_c/stem_UTF_8_spanish.c",
                                "libstemmer_c/src_c/stem_UTF_8_swedish.c",
                                "libstemmer_c/src_c/stem_UTF_8_turkish.c"
                    }
                    exportedHeaders {
                        srcDirs "vendor/cbforest/vendor/sqlite3-unicodesn/libstemmer_c/runtime",
                                "vendor/cbforest/vendor/sqlite3-unicodesn/libstemmer_c/src_c",
                                "vendor/cbforest/vendor/sqlite3-unicodesn",
                                "vendor/sqlite"
                    }
                }
            }
            binaries.withType(StaticLibraryBinary) {
                cCompiler.args "-Wformat-security",
                        "-Wmissing-declarations",
                        "-Woverriding-method-mismatch",
                        "-Wbool-conversion",
                        "-Wno-arc-retain-cycles",
                        "-std=gnu99",
                        "-DSQLITE_ENABLE_FTS4",
                        "-DSQLITE_ENABLE_FTS4_UNICODE61",
                        "-DWITH_STEMMER_english",
                        "-DDOC_COMP",
                        "-D_DOC_COMP",
                        "-fPIC"
            }
            binaries.withType(SharedLibraryBinary) { binary ->
                buildable = false
            }
        }

        CouchbaseLiteJavaForestDB(NativeLibrarySpec) {
            targetPlatform "osx_x86"
            targetPlatform "osx_x86_64"
            //targetPlatform "linux_x86" // gcc-multilib/g++-mutlilib does not work with clang
            targetPlatform "linux_x86_64"
            targetPlatform "linux_amd64"
            targetPlatform "windows_x86"
            targetPlatform "windows_x86_64"
            sources {
                cpp {
                    lib library: 'Tokenizer', linkage: 'static'
                    source {
                        srcDir "."
                        include "vendor/cbforest/vendor/forestdb/utils/crc32.cc",
                                "vendor/cbforest/vendor/forestdb/utils/debug.cc",
                                "vendor/cbforest/vendor/forestdb/utils/iniparser.cc",
                                "vendor/cbforest/vendor/forestdb/utils/memleak.cc",
                                "vendor/cbforest/vendor/forestdb/utils/partiallock.cc",
                                "vendor/cbforest/vendor/forestdb/utils/system_resource_stats.cc",
                                "vendor/cbforest/vendor/forestdb/utils/time_utils.cc",
                                "vendor/cbforest/vendor/forestdb/src/api_wrapper.cc",
                                "vendor/cbforest/vendor/forestdb/src/avltree.cc",
                                "vendor/cbforest/vendor/forestdb/src/bgflusher.cc",
                                "vendor/cbforest/vendor/forestdb/src/blockcache.cc",
                                "vendor/cbforest/vendor/forestdb/src/btree.cc",
                                "vendor/cbforest/vendor/forestdb/src/btree_fast_str_kv.cc",
                                "vendor/cbforest/vendor/forestdb/src/btree_kv.cc",
                                "vendor/cbforest/vendor/forestdb/src/btree_str_kv.cc",
                                "vendor/cbforest/vendor/forestdb/src/btreeblock.cc",
                                "vendor/cbforest/vendor/forestdb/src/checksum.cc",
                                "vendor/cbforest/vendor/forestdb/src/compactor.cc",
                                "vendor/cbforest/vendor/forestdb/src/configuration.cc",
                                "vendor/cbforest/vendor/forestdb/src/docio.cc",
                                "vendor/cbforest/vendor/forestdb/src/encryption_aes.cc",
                                "vendor/cbforest/vendor/forestdb/src/encryption_bogus.cc",
                                "vendor/cbforest/vendor/forestdb/src/encryption.cc",
                                "vendor/cbforest/vendor/forestdb/src/fdb_errors.cc",
                                "vendor/cbforest/vendor/forestdb/src/filemgr.cc",
                                "vendor/cbforest/vendor/forestdb/src/filemgr_ops.cc",
                                "vendor/cbforest/vendor/forestdb/src/filemgr_ops_linux.cc",
                                "vendor/cbforest/vendor/forestdb/src/filemgr_ops_windows.cc",
                                "vendor/cbforest/vendor/forestdb/src/forestdb.cc",
                                "vendor/cbforest/vendor/forestdb/src/hash.cc",
                                "vendor/cbforest/vendor/forestdb/src/hash_functions.cc",
                                "vendor/cbforest/vendor/forestdb/src/hbtrie.cc",
                                "vendor/cbforest/vendor/forestdb/src/iterator.cc",
                                "vendor/cbforest/vendor/forestdb/src/kv_instance.cc",
                                "vendor/cbforest/vendor/forestdb/src/list.cc",
                                "vendor/cbforest/vendor/forestdb/src/snapshot.cc",
                                "vendor/cbforest/vendor/forestdb/src/transaction.cc",
                                "vendor/cbforest/vendor/forestdb/src/version.cc",
                                "vendor/cbforest/vendor/forestdb/src/wal.cc",
                                "vendor/cbforest/vendor/snappy/snappy.cc",
                                "vendor/cbforest/vendor/snappy/snappy-c.cc",
                                "vendor/cbforest/vendor/snappy/snappy-sinksource.cc",
                                "vendor/cbforest/vendor/snappy/snappy-stubs-internal.cc",
                                "vendor/cbforest/CBForest/slice.cc",
                                "vendor/cbforest/CBForest/sqlite_glue.c",
                                "vendor/cbforest/CBForest/varint.cc",
                                "vendor/cbforest/CBForest/Collatable.cc",
                                "vendor/cbforest/CBForest/Database.cc",
                                "vendor/cbforest/CBForest/DocEnumerator.cc",
                                "vendor/cbforest/CBForest/Document.cc",
                                "vendor/cbforest/CBForest/Geohash.cc",
                                "vendor/cbforest/CBForest/GeoIndex.cc",
                                "vendor/cbforest/CBForest/Index.cc",
                                "vendor/cbforest/CBForest/KeyStore.cc",
                                "vendor/cbforest/CBForest/RevID.cc",
                                "vendor/cbforest/CBForest/RevTree.cc",
                                "vendor/cbforest/CBForest/VersionedDocument.cc",
                                "vendor/cbforest/CBForest/MapReduceIndex.cc",
                                "vendor/cbforest/CBForest/Tokenizer.cc",
                                "vendor/cbforest/C/c4.c",
                                "vendor/cbforest/C/c4Database.cc",
                                "vendor/cbforest/C/c4View.cc",
                                "vendor/cbforest/Java/jni/native_database.cc",
                                "vendor/cbforest/Java/jni/native_document.cc",
                                "vendor/cbforest/Java/jni/native_documentiterator.cc",
                                "vendor/cbforest/Java/jni/native_glue.cc",
                                "vendor/cbforest/Java/jni/native_queryIterator.cc",
                                "vendor/cbforest/Java/jni/native_view.cc"
                    }
                    exportedHeaders {
                        srcDirs "vendor/cbforest/vendor/sqlite3-unicodesn/libstemmer_c/runtime",
                                "vendor/cbforest/vendor/sqlite3-unicodesn/libstemmer_c/src_c",
                                "vendor/cbforest/vendor/sqlite3-unicodesn",
                                "vendor/cbforest/vendor/forestdb/include",
                                "vendor/cbforest/vendor/forestdb/include/libforestdb",
                                "vendor/cbforest/vendor/forestdb/src",
                                "vendor/cbforest/vendor/forestdb/utils",
                                "vendor/cbforest/vendor/forestdb/option",
                                "vendor/cbforest/vendor/forestdb",
                                "vendor/cbforest/vendor/snappy",
                                "vendor/cbforest/CBForest",
                                "vendor/cbforest/C"
                    }
                }
                binaries.withType(StaticLibraryBinary) { binary ->
                    buildable = false
                }
            }

            binaries.all{
                cppCompiler.args "-Wformat-security",
                        "-Wmissing-declarations",
                        "-Woverriding-method-mismatch",
                        "-Wbool-conversion",
                        "-Wno-arc-retain-cycles",
                        "-std=gnu99",
                        "-std=gnu++11",
                        "-DSQLITE_ENABLE_FTS4",
                        "-DSQLITE_ENABLE_FTS4_UNICODE61",
                        "-DWITH_STEMMER_english",
                        "-D_DOC_COMP",
                        "-DHAVE_GCC_ATOMICS=1",
                        "-D__unused="

                if (targetPlatform.operatingSystem.macOsX) {
                    cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
                    linker.args '-framework', "JavaVM"
                } else if (targetPlatform.operatingSystem.linux) {
                    cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
                } else if (targetPlatform.operatingSystem.windows) {
                    cppCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cppCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                }
            }
        }
    }
}

binaries.withType(SharedLibraryBinary) { binary ->
    if (!buildable) {
        return
    }

    def builderTask = binary.tasks
    def platformName = targetPlatform.name
    def os = targetPlatform.operatingSystem.name
    def arch = targetPlatform.architecture.name.replaceAll("-", "_")
    if (platformName == "windows_amd64" || platformName == "linux_amd64") {
        arch = "amd64"
    }
    jar.into("native/${os}/${arch}") {
        from builderTask.outputFile
    }

    jar.dependsOn builderTask
}

tasks.withType(Test) {
    systemProperty "java.library.path", "./build/binaries/couchbaseLiteJavaForestDBSharedLibrary/"
}

repositories {
    jcenter()
}

dependencies {
    compile !hasProperty("buildAgainstMavenArtifacts") ?
            project(':libraries:couchbase-lite-java-core') :
            'com.couchbase.lite:couchbase-lite-java-core:' + version

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile 'com.fasterxml.jackson.core:jackson-databind:2.6.0'
    testCompile 'com.fasterxml.jackson.core:jackson-core:2.6.0'
    testCompile 'com.fasterxml.jackson.core:jackson-annotations:2.6.0'
}



////////////////////////////////////////////
// For Maven
////////////////////////////////////////////

task createMavenDirectory(type: Exec) {
    ext {
        uploadUser = System.getenv("MAVEN_UPLOAD_USERNAME") + ":" + System.getenv("MAVEN_UPLOAD_PASSWORD")
        mkcolPath  = System.getenv("MAVEN_UPLOAD_REPO_URL") + "com/couchbase/lite/couchbase-lite-java-forestdb/" + version + "/"
    }
    commandLine "curl", "--user", uploadUser, "-X", "MKCOL", mkcolPath
}

// this hack is only needed for apache mod_dav based Maven repo's like file.couchbase.com.  otherwise, skip it
createMavenDirectory.onlyIf { System.getenv("MAVEN_UPLOAD_REPO_URL").contains("files") }

// first create the directory, then do the upload
task uploadArchivesWrapper(dependsOn: createMavenDirectory) << {
    uploadArchives.execute()
}

// this will upload, but will not first create a directory (which is needed on some servers)
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: System.getenv("MAVEN_UPLOAD_REPO_URL")) {
                authentication(userName: System.getenv("MAVEN_UPLOAD_USERNAME"), password: System.getenv("MAVEN_UPLOAD_PASSWORD"))
            }
            pom.version = version
            pom.groupId = 'com.couchbase.lite'
            pom.artifactId = 'couchbase-lite-java-forestdb'
            pom.project {
                licenses {
                    license {
                        name 'Couchbase Community Edition License Agreement'
                        url 'http://www.couchbase.com/agreement/community'
                        distribution 'repo'
                    }
                }
            }
        }
    }
}
