/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.couchbase.lite.cbforest;

public class Transaction extends KeyStoreWriter {
  private transient long swigCPtr;

  protected Transaction(long cPtr, boolean cMemoryOwn) {
    super(cbforestJNI.Transaction_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Transaction obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        cbforestJNI.delete_Transaction(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public Transaction(Database db) {
    this(cbforestJNI.new_Transaction(Database.getCPtr(db), db), true);
  }

  public KeyStoreWriter toKeyStoreWriter(KeyStore s) {
    long cPtr = cbforestJNI.Transaction_toKeyStoreWriter(swigCPtr, this, KeyStore.getCPtr(s), s);
    return (cPtr == 0) ? null : new KeyStoreWriter(cPtr, false);
  }

  public Database getDatabase() {
    long cPtr = cbforestJNI.Transaction_getDatabase(swigCPtr, this);
    return (cPtr == 0) ? null : new Database(cPtr, false);
  }

  public Transaction.State state() {
    return Transaction.State.swigToEnum(cbforestJNI.Transaction_state(swigCPtr, this));
  }

  public void abort() {
    cbforestJNI.Transaction_abort(swigCPtr, this);
  }

  public final static class State {
    public final static Transaction.State kNoOp = new Transaction.State("kNoOp");
    public final static Transaction.State kAbort = new Transaction.State("kAbort");
    public final static Transaction.State kCommit = new Transaction.State("kCommit");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static State swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + State.class + " with value " + swigValue);
    }

    private State(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private State(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private State(String swigName, State swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static State[] swigValues = { kNoOp, kAbort, kCommit };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
