/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.couchbase.lite.cbforest;

public class VersionedDocument extends RevTree {
  private transient long swigCPtr;

  protected VersionedDocument(long cPtr, boolean cMemoryOwn) {
    super(cbforestJNI.VersionedDocument_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(VersionedDocument obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        cbforestJNI.delete_VersionedDocument(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public VersionedDocument(KeyStore arg0, Slice arg1) throws java.lang.Exception {
    this(cbforestJNI.new_VersionedDocument__SWIG_0(KeyStore.getCPtr(arg0), arg0, Slice.getCPtr(arg1), arg1), true);
  }

  public VersionedDocument(KeyStore arg0, Document arg1) throws java.lang.Exception {
    this(cbforestJNI.new_VersionedDocument__SWIG_1(KeyStore.getCPtr(arg0), arg0, Document.getCPtr(arg1), arg1), true);
  }

  public void read() throws java.lang.Exception {
    cbforestJNI.VersionedDocument_read(swigCPtr, this);
  }

  public boolean revsAvailable() {
    return cbforestJNI.VersionedDocument_revsAvailable(swigCPtr, this);
  }

  public Slice getDocID() {
    long cPtr = cbforestJNI.VersionedDocument_getDocID(swigCPtr, this);
    return (cPtr == 0) ? null : new Slice(cPtr, false);
  }

  public RevID getRevID() {
    long cPtr = cbforestJNI.VersionedDocument_getRevID(swigCPtr, this);
    return (cPtr == 0) ? null : new RevID(cPtr, false);
  }

  public short getFlags() {
    return cbforestJNI.VersionedDocument_getFlags(swigCPtr, this);
  }

  public boolean isDeleted() {
    return cbforestJNI.VersionedDocument_isDeleted(swigCPtr, this);
  }

  public boolean isConflicted() {
    return cbforestJNI.VersionedDocument_isConflicted(swigCPtr, this);
  }

  public boolean hasAttachments() {
    return cbforestJNI.VersionedDocument_hasAttachments(swigCPtr, this);
  }

  public boolean exists() {
    return cbforestJNI.VersionedDocument_exists(swigCPtr, this);
  }

  public java.math.BigInteger getSequence() {
    return cbforestJNI.VersionedDocument_getSequence(swigCPtr, this);
  }

  public Slice getDocType() {
    long cPtr = cbforestJNI.VersionedDocument_getDocType(swigCPtr, this);
    return (cPtr == 0) ? null : new Slice(cPtr, false);
  }

  public void setDocType(Slice arg0) {
    cbforestJNI.VersionedDocument_setDocType(swigCPtr, this, Slice.getCPtr(arg0), arg0);
  }

  public boolean changed() {
    return cbforestJNI.VersionedDocument_changed(swigCPtr, this);
  }

  public void save(Transaction arg0) {
    cbforestJNI.VersionedDocument_save(swigCPtr, this, Transaction.getCPtr(arg0), arg0);
  }

  public static short flagsOfDocument(Document arg0) {
    return cbforestJNI.VersionedDocument_flagsOfDocument(Document.getCPtr(arg0), arg0);
  }

  public static Slice docTypeOfDocument(Document arg0) {
    long cPtr = cbforestJNI.VersionedDocument_docTypeOfDocument(Document.getCPtr(arg0), arg0);
    return (cPtr == 0) ? null : new Slice(cPtr, false);
  }

  public final static int kDeleted = cbforestJNI.VersionedDocument_kDeleted_get();
  public final static int kConflicted = cbforestJNI.VersionedDocument_kConflicted_get();
  public final static int kHasAttachments = cbforestJNI.VersionedDocument_kHasAttachments_get();

}
