/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.couchbase.lite.cbforest;

public class cbforestJNI {
  public final static native byte[] cdata(long jarg1, int jarg2);
  public final static native void memmove(long jarg1, byte[] jarg2);
  public final static native long new_VectorString__SWIG_0();
  public final static native long new_VectorString__SWIG_1(long jarg1);
  public final static native long VectorString_size(long jarg1, VectorString jarg1_);
  public final static native long VectorString_capacity(long jarg1, VectorString jarg1_);
  public final static native void VectorString_reserve(long jarg1, VectorString jarg1_, long jarg2);
  public final static native boolean VectorString_isEmpty(long jarg1, VectorString jarg1_);
  public final static native void VectorString_clear(long jarg1, VectorString jarg1_);
  public final static native void VectorString_add(long jarg1, VectorString jarg1_, String jarg2);
  public final static native String VectorString_get(long jarg1, VectorString jarg1_, int jarg2);
  public final static native void VectorString_set(long jarg1, VectorString jarg1_, int jarg2, String jarg3);
  public final static native void delete_VectorString(long jarg1);
  public final static native long new_VectorRevision__SWIG_0();
  public final static native long new_VectorRevision__SWIG_1(long jarg1);
  public final static native long VectorRevision_size(long jarg1, VectorRevision jarg1_);
  public final static native long VectorRevision_capacity(long jarg1, VectorRevision jarg1_);
  public final static native void VectorRevision_reserve(long jarg1, VectorRevision jarg1_, long jarg2);
  public final static native boolean VectorRevision_isEmpty(long jarg1, VectorRevision jarg1_);
  public final static native void VectorRevision_clear(long jarg1, VectorRevision jarg1_);
  public final static native void VectorRevision_add(long jarg1, VectorRevision jarg1_, long jarg2, Revision jarg2_);
  public final static native long VectorRevision_get(long jarg1, VectorRevision jarg1_, int jarg2);
  public final static native void VectorRevision_set(long jarg1, VectorRevision jarg1_, int jarg2, long jarg3, Revision jarg3_);
  public final static native void delete_VectorRevision(long jarg1);
  public final static native long new_VectorCollatable__SWIG_0();
  public final static native long new_VectorCollatable__SWIG_1(long jarg1);
  public final static native long VectorCollatable_size(long jarg1, VectorCollatable jarg1_);
  public final static native long VectorCollatable_capacity(long jarg1, VectorCollatable jarg1_);
  public final static native void VectorCollatable_reserve(long jarg1, VectorCollatable jarg1_, long jarg2);
  public final static native boolean VectorCollatable_isEmpty(long jarg1, VectorCollatable jarg1_);
  public final static native void VectorCollatable_clear(long jarg1, VectorCollatable jarg1_);
  public final static native void VectorCollatable_add(long jarg1, VectorCollatable jarg1_, long jarg2, Collatable jarg2_);
  public final static native long VectorCollatable_get(long jarg1, VectorCollatable jarg1_, int jarg2);
  public final static native void VectorCollatable_set(long jarg1, VectorCollatable jarg1_, int jarg2, long jarg3, Collatable jarg3_);
  public final static native void delete_VectorCollatable(long jarg1);
  public final static native long new_VectorMapReduceIndex__SWIG_0();
  public final static native long new_VectorMapReduceIndex__SWIG_1(long jarg1);
  public final static native long VectorMapReduceIndex_size(long jarg1, VectorMapReduceIndex jarg1_);
  public final static native long VectorMapReduceIndex_capacity(long jarg1, VectorMapReduceIndex jarg1_);
  public final static native void VectorMapReduceIndex_reserve(long jarg1, VectorMapReduceIndex jarg1_, long jarg2);
  public final static native boolean VectorMapReduceIndex_isEmpty(long jarg1, VectorMapReduceIndex jarg1_);
  public final static native void VectorMapReduceIndex_clear(long jarg1, VectorMapReduceIndex jarg1_);
  public final static native void VectorMapReduceIndex_add(long jarg1, VectorMapReduceIndex jarg1_, long jarg2, MapReduceIndex jarg2_);
  public final static native long VectorMapReduceIndex_get(long jarg1, VectorMapReduceIndex jarg1_, int jarg2);
  public final static native void VectorMapReduceIndex_set(long jarg1, VectorMapReduceIndex jarg1_, int jarg2, long jarg3, MapReduceIndex jarg3_);
  public final static native void delete_VectorMapReduceIndex(long jarg1);
  public final static native long new_VectorKeyRange__SWIG_0();
  public final static native long new_VectorKeyRange__SWIG_1(long jarg1);
  public final static native long VectorKeyRange_size(long jarg1, VectorKeyRange jarg1_);
  public final static native long VectorKeyRange_capacity(long jarg1, VectorKeyRange jarg1_);
  public final static native void VectorKeyRange_reserve(long jarg1, VectorKeyRange jarg1_, long jarg2);
  public final static native boolean VectorKeyRange_isEmpty(long jarg1, VectorKeyRange jarg1_);
  public final static native void VectorKeyRange_clear(long jarg1, VectorKeyRange jarg1_);
  public final static native void VectorKeyRange_add(long jarg1, VectorKeyRange jarg1_, long jarg2, KeyRange jarg2_);
  public final static native long VectorKeyRange_get(long jarg1, VectorKeyRange jarg1_, int jarg2);
  public final static native void VectorKeyRange_set(long jarg1, VectorKeyRange jarg1_, int jarg2, long jarg3, KeyRange jarg3_);
  public final static native void delete_VectorKeyRange(long jarg1);
  public final static native long new_VectorRevID__SWIG_0();
  public final static native long new_VectorRevID__SWIG_1(long jarg1);
  public final static native long VectorRevID_size(long jarg1, VectorRevID jarg1_);
  public final static native long VectorRevID_capacity(long jarg1, VectorRevID jarg1_);
  public final static native void VectorRevID_reserve(long jarg1, VectorRevID jarg1_, long jarg2);
  public final static native boolean VectorRevID_isEmpty(long jarg1, VectorRevID jarg1_);
  public final static native void VectorRevID_clear(long jarg1, VectorRevID jarg1_);
  public final static native void VectorRevID_add(long jarg1, VectorRevID jarg1_, long jarg2, RevID jarg2_);
  public final static native long VectorRevID_get(long jarg1, VectorRevID jarg1_, int jarg2);
  public final static native void VectorRevID_set(long jarg1, VectorRevID jarg1_, int jarg2, long jarg3, RevID jarg3_);
  public final static native void delete_VectorRevID(long jarg1);
  public final static native int kDefaultContent_get();
  public final static native int kMetaOnly_get();
  public final static native int FDB_OPEN_FLAG_CREATE_get();
  public final static native int FDB_OPEN_FLAG_RDONLY_get();
  public final static native long new_KvsInfo();
  public final static native String KvsInfo_getName(long jarg1, KvsInfo jarg1_);
  public final static native java.math.BigInteger KvsInfo_getLastSeqnum(long jarg1, KvsInfo jarg1_);
  public final static native java.math.BigInteger KvsInfo_getDocCount(long jarg1, KvsInfo jarg1_);
  public final static native java.math.BigInteger KvsInfo_getSpaceUsed(long jarg1, KvsInfo jarg1_);
  public final static native void delete_KvsInfo(long jarg1);
  public final static native long new_FileInfo();
  public final static native String FileInfo_getFilename(long jarg1, FileInfo jarg1_);
  public final static native String FileInfo_getNewFilename(long jarg1, FileInfo jarg1_);
  public final static native java.math.BigInteger FileInfo_getDocCount(long jarg1, FileInfo jarg1_);
  public final static native java.math.BigInteger FileInfo_getSpaceUsed(long jarg1, FileInfo jarg1_);
  public final static native java.math.BigInteger FileInfo_getFileSize(long jarg1, FileInfo jarg1_);
  public final static native void delete_FileInfo(long jarg1);
  public final static native long new_Config();
  public final static native long Config_getBlocksize(long jarg1, Config jarg1_);
  public final static native void Config_setBlocksize(long jarg1, Config jarg1_, long jarg2);
  public final static native java.math.BigInteger Config_getBuffercacheSize(long jarg1, Config jarg1_);
  public final static native void Config_setBuffercacheSize(long jarg1, Config jarg1_, java.math.BigInteger jarg2);
  public final static native int Config_getChunksize(long jarg1, Config jarg1_);
  public final static native void Config_setChunksize(long jarg1, Config jarg1_, int jarg2);
  public final static native boolean Config_isCleanupCacheOnclose(long jarg1, Config jarg1_);
  public final static native void Config_setCleanupCacheOnclose(long jarg1, Config jarg1_, boolean jarg2);
  public final static native long Config_getCompactionBufMaxsize(long jarg1, Config jarg1_);
  public final static native void Config_setCompactionBufMaxsize(long jarg1, Config jarg1_, long jarg2);
  public final static native java.math.BigInteger Config_getCompactionMinimumFilesize(long jarg1, Config jarg1_);
  public final static native void Config_setCompactionMinimumFilesize(long jarg1, Config jarg1_, java.math.BigInteger jarg2);
  public final static native short Config_getCompactionThreshold(long jarg1, Config jarg1_);
  public final static native void Config_setCompactionThreshold(long jarg1, Config jarg1_, short jarg2);
  public final static native java.math.BigInteger Config_getCompactorSleepDuration(long jarg1, Config jarg1_);
  public final static native void Config_setCompactorSleepDuration(long jarg1, Config jarg1_, java.math.BigInteger jarg2);
  public final static native boolean Config_isCompressDocumentBody(long jarg1, Config jarg1_);
  public final static native void Config_setCompressDocumentBody(long jarg1, Config jarg1_, boolean jarg2);
  public final static native int Config_getFlags(long jarg1, Config jarg1_);
  public final static native void Config_setFlags(long jarg1, Config jarg1_, int jarg2);
  public final static native long Config_getPurgingInterval(long jarg1, Config jarg1_);
  public final static native void Config_setPurgingInterval(long jarg1, Config jarg1_, long jarg2);
  public final static native boolean Config_isWalFlushBeforeCommit(long jarg1, Config jarg1_);
  public final static native void Config_setWalFlushBeforeCommit(long jarg1, Config jarg1_, boolean jarg2);
  public final static native java.math.BigInteger Config_getWalThreshold(long jarg1, Config jarg1_);
  public final static native void Config_setWalThreshold(long jarg1, Config jarg1_, java.math.BigInteger jarg2);
  public final static native void delete_Config(long jarg1);
  public final static native long new_Slice__SWIG_0();
  public final static native long new_Slice__SWIG_1(byte[] jarg1);
  public final static native void delete_Slice(long jarg1);
  public final static native byte[] Slice_getBuf(long jarg1, Slice jarg1_);
  public final static native int Slice_compare(long jarg1, Slice jarg1_, long jarg2, Slice jarg2_);
  public final static native long Slice_copy(long jarg1, Slice jarg1_);
  public final static native void Slice_free(long jarg1, Slice jarg1_);
  public final static native int Slice_getSize(long jarg1, Slice jarg1_);
  public final static native long Slice_getData(long jarg1, Slice jarg1_);
  public final static native long new_KeyStore__SWIG_1(long jarg1, Database jarg1_, String jarg2) throws java.lang.Exception;
  public final static native void delete_KeyStore(long jarg1);
  public final static native long KeyStore_getKvsInfo(long jarg1, KeyStore jarg1_) throws java.lang.Exception;
  public final static native java.math.BigInteger KeyStore_getLastSequence(long jarg1, KeyStore jarg1_) throws java.lang.Exception;
  public final static native String KeyStore_getName(long jarg1, KeyStore jarg1_);
  public final static native long KeyStore_get__SWIG_0(long jarg1, KeyStore jarg1_, long jarg2, Slice jarg2_, int jarg3) throws java.lang.Exception;
  public final static native long KeyStore_get__SWIG_1(long jarg1, KeyStore jarg1_, long jarg2, Slice jarg2_) throws java.lang.Exception;
  public final static native long KeyStore_get__SWIG_2(long jarg1, KeyStore jarg1_, java.math.BigInteger jarg2, int jarg3) throws java.lang.Exception;
  public final static native long KeyStore_get__SWIG_3(long jarg1, KeyStore jarg1_, java.math.BigInteger jarg2) throws java.lang.Exception;
  public final static native boolean KeyStore_read__SWIG_0(long jarg1, KeyStore jarg1_, long jarg2, Document jarg2_, int jarg3) throws java.lang.Exception;
  public final static native boolean KeyStore_read__SWIG_1(long jarg1, KeyStore jarg1_, long jarg2, Document jarg2_) throws java.lang.Exception;
  public final static native long KeyStore_getByOffset(long jarg1, KeyStore jarg1_, java.math.BigInteger jarg2, java.math.BigInteger jarg3) throws java.lang.Exception;
  public final static native void KeyStore_deleteKeyStore(long jarg1, KeyStore jarg1_, long jarg2, Transaction jarg2_);
  public final static native void KeyStore_erase(long jarg1, KeyStore jarg1_, long jarg2, Transaction jarg2_);
  public final static native long new_KeyStoreWriter__SWIG_1(long jarg1, KeyStore jarg1_, long jarg2);
  public final static native void delete_KeyStoreWriter(long jarg1);
  public final static native java.math.BigInteger KeyStoreWriter_set__SWIG_0(long jarg1, KeyStoreWriter jarg1_, long jarg2, Slice jarg2_, long jarg3, Slice jarg3_, long jarg4, Slice jarg4_) throws java.lang.Exception;
  public final static native java.math.BigInteger KeyStoreWriter_set__SWIG_1(long jarg1, KeyStoreWriter jarg1_, long jarg2, Slice jarg2_, long jarg3, Slice jarg3_) throws java.lang.Exception;
  public final static native void KeyStoreWriter_write(long jarg1, KeyStoreWriter jarg1_, long jarg2, Document jarg2_) throws java.lang.Exception;
  public final static native boolean KeyStoreWriter_del__SWIG_0(long jarg1, KeyStoreWriter jarg1_, long jarg2, Slice jarg2_) throws java.lang.Exception;
  public final static native boolean KeyStoreWriter_del__SWIG_1(long jarg1, KeyStoreWriter jarg1_, java.math.BigInteger jarg2) throws java.lang.Exception;
  public final static native boolean KeyStoreWriter_del__SWIG_2(long jarg1, KeyStoreWriter jarg1_, long jarg2, Document jarg2_) throws java.lang.Exception;
  public final static native void KeyStoreWriter_rollbackTo(long jarg1, KeyStoreWriter jarg1_, java.math.BigInteger jarg2) throws java.lang.Exception;
  public final static native long new_Document__SWIG_0();
  public final static native long new_Document__SWIG_1(long jarg1, Slice jarg1_);
  public final static native void delete_Document(long jarg1);
  public final static native long Document_getKey(long jarg1, Document jarg1_);
  public final static native long Document_getMeta(long jarg1, Document jarg1_);
  public final static native long Document_getBody(long jarg1, Document jarg1_);
  public final static native void Document_setKey(long jarg1, Document jarg1_, long jarg2, Slice jarg2_);
  public final static native void Document_setMeta(long jarg1, Document jarg1_, long jarg2, Slice jarg2_);
  public final static native void Document_setBody(long jarg1, Document jarg1_, long jarg2, Slice jarg2_);
  public final static native long Document_resizeMeta(long jarg1, Document jarg1_, long jarg2) throws java.lang.Exception;
  public final static native void Document_clearMetaAndBody(long jarg1, Document jarg1_);
  public final static native java.math.BigInteger Document_getSequence(long jarg1, Document jarg1_);
  public final static native java.math.BigInteger Document_offset(long jarg1, Document jarg1_);
  public final static native long Document_sizeOnDisk(long jarg1, Document jarg1_);
  public final static native boolean Document_deleted(long jarg1, Document jarg1_);
  public final static native boolean Document_exists(long jarg1, Document jarg1_);
  public final static native boolean Document_valid(long jarg1, Document jarg1_);
  public final static native void Document_updateSequence(long jarg1, Document jarg1_, java.math.BigInteger jarg2);
  public final static native long Database_defaultConfig();
  public final static native long new_Database(String jarg1, long jarg2, Config jarg2_) throws java.lang.Exception;
  public final static native void delete_Database(long jarg1);
  public final static native long Database_getFileInfo(long jarg1, Database jarg1_) throws java.lang.Exception;
  public final static native String Database_getFilename(long jarg1, Database jarg1_);
  public final static native boolean Database_isReadOnly(long jarg1, Database jarg1_);
  public final static native void Database_deleteDatabase(long jarg1, Database jarg1_);
  public final static native void Database_erase(long jarg1, Database jarg1_);
  public final static native void Database_compact(long jarg1, Database jarg1_) throws java.lang.Exception;
  public final static native void Database_commit(long jarg1, Database jarg1_) throws java.lang.Exception;
  public final static native long new_Transaction(long jarg1, Database jarg1_);
  public final static native void delete_Transaction(long jarg1);
  public final static native long Transaction_toKeyStoreWriter(long jarg1, Transaction jarg1_, long jarg2, KeyStore jarg2_);
  public final static native long Transaction_getDatabase(long jarg1, Transaction jarg1_);
  public final static native int Transaction_state(long jarg1, Transaction jarg1_);
  public final static native void Transaction_abort(long jarg1, Transaction jarg1_);
  public final static native long new_DocEnumerator_Options();
  public final static native void delete_DocEnumerator_Options(long jarg1);
  public final static native int DocEnumerator_Options_getContentOption(long jarg1, DocEnumerator.Options jarg1_);
  public final static native void DocEnumerator_Options_setContentOption(long jarg1, DocEnumerator.Options jarg1_, int jarg2);
  public final static native boolean DocEnumerator_Options_isIncludeDeleted(long jarg1, DocEnumerator.Options jarg1_);
  public final static native void DocEnumerator_Options_setIncludeDeleted(long jarg1, DocEnumerator.Options jarg1_, boolean jarg2);
  public final static native boolean DocEnumerator_Options_isInclusiveEnd(long jarg1, DocEnumerator.Options jarg1_);
  public final static native void DocEnumerator_Options_setInclusiveEnd(long jarg1, DocEnumerator.Options jarg1_, boolean jarg2);
  public final static native boolean DocEnumerator_Options_isInclusiveStart(long jarg1, DocEnumerator.Options jarg1_);
  public final static native void DocEnumerator_Options_setInclusiveStart(long jarg1, DocEnumerator.Options jarg1_, boolean jarg2);
  public final static native long DocEnumerator_Options_getLimit(long jarg1, DocEnumerator.Options jarg1_);
  public final static native void DocEnumerator_Options_setLimit(long jarg1, DocEnumerator.Options jarg1_, long jarg2);
  public final static native long DocEnumerator_Options_getSkip(long jarg1, DocEnumerator.Options jarg1_);
  public final static native void DocEnumerator_Options_setSkip(long jarg1, DocEnumerator.Options jarg1_, long jarg2);
  public final static native boolean DocEnumerator_Options_isDescending(long jarg1, DocEnumerator.Options jarg1_);
  public final static native void DocEnumerator_Options_setDescending(long jarg1, DocEnumerator.Options jarg1_, boolean jarg2);
  public final static native long new_DocEnumerator__SWIG_0() throws java.lang.Exception;
  public final static native long new_DocEnumerator__SWIG_1(long jarg1, KeyStore jarg1_, long jarg2, Slice jarg2_, long jarg3, Slice jarg3_, long jarg4, DocEnumerator.Options jarg4_) throws java.lang.Exception;
  public final static native long new_DocEnumerator__SWIG_2(long jarg1, KeyStore jarg1_, long jarg2, VectorString jarg2_, long jarg3, DocEnumerator.Options jarg3_) throws java.lang.Exception;
  public final static native long new_DocEnumerator__SWIG_3(long jarg1, KeyStore jarg1_, java.math.BigInteger jarg2, java.math.BigInteger jarg3, long jarg4, DocEnumerator.Options jarg4_) throws java.lang.Exception;
  public final static native void delete_DocEnumerator(long jarg1);
  public final static native boolean DocEnumerator_next(long jarg1, DocEnumerator jarg1_) throws java.lang.Exception;
  public final static native void DocEnumerator_seek(long jarg1, DocEnumerator jarg1_, long jarg2, Slice jarg2_) throws java.lang.Exception;
  public final static native long DocEnumerator_doc(long jarg1, DocEnumerator jarg1_) throws java.lang.Exception;
  public final static native void DocEnumerator_close(long jarg1, DocEnumerator jarg1_);
  public final static native long new_RevID__SWIG_0();
  public final static native long new_RevID__SWIG_1(String jarg1, long jarg2);
  public final static native long new_RevID__SWIG_2(String jarg1);
  public final static native void delete_RevID(long jarg1);
  public final static native boolean RevID_isCompressed(long jarg1, RevID jarg1_);
  public final static native long RevID_expanded(long jarg1, RevID jarg1_);
  public final static native long RevID_expandedSize(long jarg1, RevID jarg1_);
  public final static native boolean RevID_expandInto(long jarg1, RevID jarg1_, long jarg2, Slice jarg2_);
  public final static native long RevID_generation(long jarg1, RevID jarg1_) throws java.lang.Exception;
  public final static native long RevID_digest(long jarg1, RevID jarg1_) throws java.lang.Exception;
  public final static native byte[] RevID_getBuf(long jarg1, RevID jarg1_);
  public final static native String RevID_toString(long jarg1, RevID jarg1_);
  public final static native long RevID_getBufSize(long jarg1, RevID jarg1_);
  public final static native long new_RevIDBuffer__SWIG_0();
  public final static native long new_RevIDBuffer__SWIG_1(long jarg1, Slice jarg1_);
  public final static native void delete_RevIDBuffer(long jarg1);
  public final static native void RevIDBuffer_parse(long jarg1, RevIDBuffer jarg1_, long jarg2, Slice jarg2_) throws java.lang.Exception;
  public final static native long new_Revision();
  public final static native long Revision_getOwner(long jarg1, Revision jarg1_);
  public final static native long Revision_getRevID(long jarg1, Revision jarg1_);
  public final static native java.math.BigInteger Revision_getSequence(long jarg1, Revision jarg1_);
  public final static native boolean Revision_isBodyAvailable(long jarg1, Revision jarg1_);
  public final static native long Revision_readBody(long jarg1, Revision jarg1_);
  public final static native boolean Revision_isLeaf(long jarg1, Revision jarg1_);
  public final static native boolean Revision_isDeleted(long jarg1, Revision jarg1_);
  public final static native boolean Revision_hasAttachments(long jarg1, Revision jarg1_);
  public final static native boolean Revision_isNew(long jarg1, Revision jarg1_);
  public final static native boolean Revision_isActive(long jarg1, Revision jarg1_);
  public final static native long Revision_index(long jarg1, Revision jarg1_);
  public final static native long Revision_getParent(long jarg1, Revision jarg1_);
  public final static native long Revision_history(long jarg1, Revision jarg1_);
  public final static native boolean Revision_isSameAddress(long jarg1, Revision jarg1_, long jarg2, Revision jarg2_);
  public final static native void delete_Revision(long jarg1);
  public final static native long new_RevTree__SWIG_0();
  public final static native long new_RevTree__SWIG_1(long jarg1, Slice jarg1_, java.math.BigInteger jarg2, java.math.BigInteger jarg3);
  public final static native void delete_RevTree(long jarg1);
  public final static native void RevTree_decode(long jarg1, RevTree jarg1_, long jarg2, Slice jarg2_, java.math.BigInteger jarg3, java.math.BigInteger jarg4) throws java.lang.Exception;
  public final static native long RevTree_encode(long jarg1, RevTree jarg1_);
  public final static native long RevTree_size(long jarg1, RevTree jarg1_);
  public final static native long RevTree_get__SWIG_0(long jarg1, RevTree jarg1_, long jarg2) throws java.lang.Exception;
  public final static native long RevTree_get__SWIG_1(long jarg1, RevTree jarg1_, long jarg2, RevID jarg2_) throws java.lang.Exception;
  public final static native long RevTree_getBySequence(long jarg1, RevTree jarg1_, java.math.BigInteger jarg2);
  public final static native long RevTree_allRevisions(long jarg1, RevTree jarg1_);
  public final static native long RevTree_currentRevision(long jarg1, RevTree jarg1_);
  public final static native long RevTree_currentRevisions(long jarg1, RevTree jarg1_);
  public final static native boolean RevTree_hasConflict(long jarg1, RevTree jarg1_);
  public final static native long RevTree_insert__SWIG_0(long jarg1, RevTree jarg1_, long jarg2, RevID jarg2_, long jarg3, Slice jarg3_, boolean jarg4, boolean jarg5, long jarg6, RevID jarg6_, boolean jarg7);
  public final static native long RevTree_insert__SWIG_1(long jarg1, RevTree jarg1_, long jarg2, RevID jarg2_, long jarg3, Slice jarg3_, boolean jarg4, boolean jarg5, long jarg6, Revision jarg6_, boolean jarg7);
  public final static native int RevTree_insertHistory(long jarg1, RevTree jarg1_, long jarg2, VectorRevID jarg2_, long jarg3, Slice jarg3_, boolean jarg4, boolean jarg5);
  public final static native int RevTree_getLatestHttpStatus(long jarg1, RevTree jarg1_);
  public final static native long RevTree_prune(long jarg1, RevTree jarg1_, long jarg2);
  public final static native int RevTree_purge(long jarg1, RevTree jarg1_, long jarg2, RevID jarg2_);
  public final static native void RevTree_sort(long jarg1, RevTree jarg1_);
  public final static native int VersionedDocument_kDeleted_get();
  public final static native int VersionedDocument_kConflicted_get();
  public final static native int VersionedDocument_kHasAttachments_get();
  public final static native long new_VersionedDocument__SWIG_0(long jarg1, KeyStore jarg1_, long jarg2, Slice jarg2_) throws java.lang.Exception;
  public final static native long new_VersionedDocument__SWIG_1(long jarg1, KeyStore jarg1_, long jarg2, Document jarg2_) throws java.lang.Exception;
  public final static native void delete_VersionedDocument(long jarg1);
  public final static native void VersionedDocument_read(long jarg1, VersionedDocument jarg1_) throws java.lang.Exception;
  public final static native boolean VersionedDocument_revsAvailable(long jarg1, VersionedDocument jarg1_);
  public final static native long VersionedDocument_getDocID(long jarg1, VersionedDocument jarg1_);
  public final static native long VersionedDocument_getRevID(long jarg1, VersionedDocument jarg1_);
  public final static native short VersionedDocument_getFlags(long jarg1, VersionedDocument jarg1_);
  public final static native boolean VersionedDocument_isDeleted(long jarg1, VersionedDocument jarg1_);
  public final static native boolean VersionedDocument_isConflicted(long jarg1, VersionedDocument jarg1_);
  public final static native boolean VersionedDocument_hasAttachments(long jarg1, VersionedDocument jarg1_);
  public final static native boolean VersionedDocument_exists(long jarg1, VersionedDocument jarg1_);
  public final static native java.math.BigInteger VersionedDocument_getSequence(long jarg1, VersionedDocument jarg1_);
  public final static native long VersionedDocument_getDocType(long jarg1, VersionedDocument jarg1_);
  public final static native void VersionedDocument_setDocType(long jarg1, VersionedDocument jarg1_, long jarg2, Slice jarg2_);
  public final static native boolean VersionedDocument_changed(long jarg1, VersionedDocument jarg1_);
  public final static native void VersionedDocument_save(long jarg1, VersionedDocument jarg1_, long jarg2, Transaction jarg2_);
  public final static native short VersionedDocument_flagsOfDocument(long jarg1, Document jarg1_);
  public final static native long VersionedDocument_docTypeOfDocument(long jarg1, Document jarg1_);
  public final static native int CollatableTypes_kEndSequence_get();
  public final static native int CollatableTypes_kError_get();
  public final static native long new_CollatableTypes();
  public final static native void delete_CollatableTypes(long jarg1);
  public final static native long new_Collatable__SWIG_0();
  public final static native long new_Collatable__SWIG_1(boolean jarg1);
  public final static native long new_Collatable__SWIG_2(double jarg1);
  public final static native long new_Collatable__SWIG_3(String jarg1);
  public final static native long new_Collatable__SWIG_4(long jarg1, Collatable jarg1_);
  public final static native long new_Collatable__SWIG_5(long jarg1, Slice jarg1_);
  public final static native void delete_Collatable(long jarg1);
  public final static native long Collatable_addNull(long jarg1, Collatable jarg1_);
  public final static native long Collatable_add__SWIG_0(long jarg1, Collatable jarg1_, boolean jarg2);
  public final static native long Collatable_add__SWIG_1(long jarg1, Collatable jarg1_, double jarg2);
  public final static native long Collatable_add__SWIG_2(long jarg1, Collatable jarg1_, long jarg2, Collatable jarg2_);
  public final static native long Collatable_add__SWIG_3(long jarg1, Collatable jarg1_, String jarg2);
  public final static native long Collatable_add__SWIG_4(long jarg1, Collatable jarg1_, long jarg2, Slice jarg2_);
  public final static native long Collatable_beginArray(long jarg1, Collatable jarg1_);
  public final static native long Collatable_endArray(long jarg1, Collatable jarg1_);
  public final static native long Collatable_beginMap(long jarg1, Collatable jarg1_);
  public final static native long Collatable_endMap(long jarg1, Collatable jarg1_);
  public final static native long Collatable_addSpecial(long jarg1, Collatable jarg1_);
  public final static native long Collatable_toSlice(long jarg1, Collatable jarg1_);
  public final static native long Collatable_size(long jarg1, Collatable jarg1_);
  public final static native boolean Collatable_empty(long jarg1, Collatable jarg1_);
  public final static native String Collatable_dump(long jarg1, Collatable jarg1_);
  public final static native long new_CollatableReader(long jarg1, Slice jarg1_);
  public final static native void delete_CollatableReader(long jarg1);
  public final static native long CollatableReader_data(long jarg1, CollatableReader jarg1_);
  public final static native int CollatableReader_peekTag(long jarg1, CollatableReader jarg1_);
  public final static native long CollatableReader_readInt(long jarg1, CollatableReader jarg1_) throws java.lang.Exception;
  public final static native double CollatableReader_readDouble(long jarg1, CollatableReader jarg1_) throws java.lang.Exception;
  public final static native long CollatableReader_readString(long jarg1, CollatableReader jarg1_) throws java.lang.Exception;
  public final static native long CollatableReader_read(long jarg1, CollatableReader jarg1_) throws java.lang.Exception;
  public final static native void CollatableReader_beginArray(long jarg1, CollatableReader jarg1_);
  public final static native void CollatableReader_endArray(long jarg1, CollatableReader jarg1_);
  public final static native void CollatableReader_beginMap(long jarg1, CollatableReader jarg1_);
  public final static native void CollatableReader_endMap(long jarg1, CollatableReader jarg1_);
  public final static native String CollatableReader_dump(long jarg1, CollatableReader jarg1_);
  public final static native long new_KeyRange__SWIG_0(long jarg1, Collatable jarg1_, long jarg2, Collatable jarg2_, boolean jarg3);
  public final static native long new_KeyRange__SWIG_1(long jarg1, Collatable jarg1_, long jarg2, Collatable jarg2_);
  public final static native long new_KeyRange__SWIG_2(long jarg1, Collatable jarg1_);
  public final static native long new_KeyRange__SWIG_3(long jarg1, KeyRange jarg1_);
  public final static native boolean KeyRange_isKeyPastEnd(long jarg1, KeyRange jarg1_, long jarg2, Slice jarg2_);
  public final static native void delete_KeyRange(long jarg1);
  public final static native long new_Index__SWIG_2(long jarg1, Database jarg1_, String jarg2);
  public final static native void delete_Index(long jarg1);
  public final static native long new_IndexWriter(long jarg1, Index jarg1_, long jarg2, Transaction jarg2_);
  public final static native void delete_IndexWriter(long jarg1);
  public final static native boolean IndexWriter_update(long jarg1, IndexWriter jarg1_, long jarg2, Slice jarg2_, java.math.BigInteger jarg3, long jarg4, VectorCollatable jarg4_, long jarg5, VectorCollatable jarg5_);
  public final static native java.math.BigInteger IndexWriter_getRowCount(long jarg1, IndexWriter jarg1_);
  public final static native void IndexWriter_setRowCount(long jarg1, IndexWriter jarg1_, java.math.BigInteger jarg2);
  public final static native long new_IndexEnumerator__SWIG_0(long jarg1, Index jarg1_, long jarg2, Collatable jarg2_, long jarg3, Slice jarg3_, long jarg4, Collatable jarg4_, long jarg5, Slice jarg5_, long jarg6, DocEnumerator.Options jarg6_);
  public final static native long new_IndexEnumerator__SWIG_1(long jarg1, Index jarg1_, long jarg2, VectorKeyRange jarg2_, long jarg3, DocEnumerator.Options jarg3_);
  public final static native long IndexEnumerator_key(long jarg1, IndexEnumerator jarg1_);
  public final static native long IndexEnumerator_value(long jarg1, IndexEnumerator jarg1_);
  public final static native long IndexEnumerator_docID(long jarg1, IndexEnumerator jarg1_);
  public final static native java.math.BigInteger IndexEnumerator_sequence(long jarg1, IndexEnumerator jarg1_);
  public final static native boolean IndexEnumerator_next(long jarg1, IndexEnumerator jarg1_) throws java.lang.Exception;
  public final static native void delete_IndexEnumerator(long jarg1);
  public final static native long new_Mappable(long jarg1, Document jarg1_);
  public final static native void delete_Mappable(long jarg1);
  public final static native void delete_EmitFn(long jarg1);
  public final static native void EmitFn_call(long jarg1, EmitFn jarg1_, long jarg2, Collatable jarg2_, long jarg3, Collatable jarg3_);
  public final static native void delete_MapFn(long jarg1);
  public final static native void MapFn_call(long jarg1, MapFn jarg1_, long jarg2, Mappable jarg2_, long jarg3, EmitFn jarg3_);
  public final static native void MapFn_callSwigExplicitMapFn(long jarg1, MapFn jarg1_, long jarg2, Mappable jarg2_, long jarg3, EmitFn jarg3_);
  public final static native long new_MapFn();
  public final static native void MapFn_director_connect(MapFn obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void MapFn_change_ownership(MapFn obj, long cptr, boolean take_or_release);
  public final static native long new_MapReduceIndex(long jarg1, Database jarg1_, String jarg2, long jarg3, KeyStore jarg3_);
  public final static native void delete_MapReduceIndex(long jarg1);
  public final static native long MapReduceIndex_sourceStore(long jarg1, MapReduceIndex jarg1_);
  public final static native void MapReduceIndex_readState(long jarg1, MapReduceIndex jarg1_);
  public final static native int MapReduceIndex_indexType(long jarg1, MapReduceIndex jarg1_);
  public final static native void MapReduceIndex_setup(long jarg1, MapReduceIndex jarg1_, long jarg2, Transaction jarg2_, int jarg3, long jarg4, MapFn jarg4_, String jarg5);
  public final static native java.math.BigInteger MapReduceIndex_lastSequenceIndexed(long jarg1, MapReduceIndex jarg1_);
  public final static native java.math.BigInteger MapReduceIndex_lastSequenceChangedAt(long jarg1, MapReduceIndex jarg1_);
  public final static native java.math.BigInteger MapReduceIndex_rowCount(long jarg1, MapReduceIndex jarg1_);
  public final static native void MapReduceIndex_erase(long jarg1, MapReduceIndex jarg1_, long jarg2, Transaction jarg2_);
  public final static native long new_MapReduceIndexer();
  public final static native void delete_MapReduceIndexer(long jarg1);
  public final static native void MapReduceIndexer_addIndex(long jarg1, MapReduceIndexer jarg1_, long jarg2, MapReduceIndex jarg2_, long jarg3, Transaction jarg3_);
  public final static native void MapReduceIndexer_triggerOnIndex(long jarg1, MapReduceIndexer jarg1_, long jarg2, MapReduceIndex jarg2_);
  public final static native boolean MapReduceIndexer_run(long jarg1, MapReduceIndexer jarg1_);
  public final static native void MapReduceIndexer_addDocument(long jarg1, MapReduceIndexer jarg1_, long jarg2, Document jarg2_);
  public final static native void MapReduceIndexer_addDocumentSwigExplicitMapReduceIndexer(long jarg1, MapReduceIndexer jarg1_, long jarg2, Document jarg2_);
  public final static native void MapReduceIndexer_addMappable(long jarg1, MapReduceIndexer jarg1_, long jarg2, Mappable jarg2_);
  public final static native void MapReduceIndexer_director_connect(MapReduceIndexer obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void MapReduceIndexer_change_ownership(MapReduceIndexer obj, long cptr, boolean take_or_release);
  public final static native long KeyStoreWriter_SWIGUpcast(long jarg1);
  public final static native long Database_SWIGUpcast(long jarg1);
  public final static native long Transaction_SWIGUpcast(long jarg1);
  public final static native long RevID_SWIGUpcast(long jarg1);
  public final static native long RevIDBuffer_SWIGUpcast(long jarg1);
  public final static native long VersionedDocument_SWIGUpcast(long jarg1);
  public final static native long MapReduceIndex_SWIGUpcast(long jarg1);

  public static void SwigDirector_MapFn_call(MapFn jself, long arg0, long emit) {
    jself.call(
    Mappable.createOrLookup(arg0)
, new EmitFn(emit, false));
  }
  public static void SwigDirector_MapReduceIndexer_addDocument(MapReduceIndexer jself, long arg0) {
    jself.addDocument((arg0 == 0) ? null : new Document(arg0, false));
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
