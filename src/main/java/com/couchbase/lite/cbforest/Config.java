/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.couchbase.lite.cbforest;

public class Config {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Config(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Config obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        cbforestJNI.delete_Config(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Config() {
    this(cbforestJNI.new_Config(), true);
  }

  public long getBlocksize() {
    return cbforestJNI.Config_getBlocksize(swigCPtr, this);
  }

  public void setBlocksize(long blocksize) {
    cbforestJNI.Config_setBlocksize(swigCPtr, this, blocksize);
  }

  public java.math.BigInteger getBuffercacheSize() {
    return cbforestJNI.Config_getBuffercacheSize(swigCPtr, this);
  }

  public void setBuffercacheSize(java.math.BigInteger buffercacheSize) {
    cbforestJNI.Config_setBuffercacheSize(swigCPtr, this, buffercacheSize);
  }

  public int getChunksize() {
    return cbforestJNI.Config_getChunksize(swigCPtr, this);
  }

  public void setChunksize(int chunksize) {
    cbforestJNI.Config_setChunksize(swigCPtr, this, chunksize);
  }

  public boolean isCleanupCacheOnclose() {
    return cbforestJNI.Config_isCleanupCacheOnclose(swigCPtr, this);
  }

  public void setCleanupCacheOnclose(boolean cleanupCacheOnclose) {
    cbforestJNI.Config_setCleanupCacheOnclose(swigCPtr, this, cleanupCacheOnclose);
  }

  public long getCompactionBufMaxsize() {
    return cbforestJNI.Config_getCompactionBufMaxsize(swigCPtr, this);
  }

  public void setCompactionBufMaxsize(long compactionBufMaxsize) {
    cbforestJNI.Config_setCompactionBufMaxsize(swigCPtr, this, compactionBufMaxsize);
  }

  public java.math.BigInteger getCompactionMinimumFilesize() {
    return cbforestJNI.Config_getCompactionMinimumFilesize(swigCPtr, this);
  }

  public void setCompactionMinimumFilesize(java.math.BigInteger compactionMinimumFilesize) {
    cbforestJNI.Config_setCompactionMinimumFilesize(swigCPtr, this, compactionMinimumFilesize);
  }

  public short getCompactionThreshold() {
    return cbforestJNI.Config_getCompactionThreshold(swigCPtr, this);
  }

  public void setCompactionThreshold(short compactionThreshold) {
    cbforestJNI.Config_setCompactionThreshold(swigCPtr, this, compactionThreshold);
  }

  public java.math.BigInteger getCompactorSleepDuration() {
    return cbforestJNI.Config_getCompactorSleepDuration(swigCPtr, this);
  }

  public void setCompactorSleepDuration(java.math.BigInteger compactorSleepDuration) {
    cbforestJNI.Config_setCompactorSleepDuration(swigCPtr, this, compactorSleepDuration);
  }

  public boolean isCompressDocumentBody() {
    return cbforestJNI.Config_isCompressDocumentBody(swigCPtr, this);
  }

  public void setCompressDocumentBody(boolean compressDocumentBody) {
    cbforestJNI.Config_setCompressDocumentBody(swigCPtr, this, compressDocumentBody);
  }

  public OpenFlags getFlags() {
    return OpenFlags.swigToEnum(cbforestJNI.Config_getFlags(swigCPtr, this));
  }

  public void setFlags(OpenFlags flags) {
    cbforestJNI.Config_setFlags(swigCPtr, this, flags.swigValue());
  }

  public long getPurgingInterval() {
    return cbforestJNI.Config_getPurgingInterval(swigCPtr, this);
  }

  public void setPurgingInterval(long purgingInterval) {
    cbforestJNI.Config_setPurgingInterval(swigCPtr, this, purgingInterval);
  }

  public boolean isWalFlushBeforeCommit() {
    return cbforestJNI.Config_isWalFlushBeforeCommit(swigCPtr, this);
  }

  public void setWalFlushBeforeCommit(boolean walFlushBeforeCommit) {
    cbforestJNI.Config_setWalFlushBeforeCommit(swigCPtr, this, walFlushBeforeCommit);
  }

  public java.math.BigInteger getWalThreshold() {
    return cbforestJNI.Config_getWalThreshold(swigCPtr, this);
  }

  public void setWalThreshold(java.math.BigInteger walThreshold) {
    cbforestJNI.Config_setWalThreshold(swigCPtr, this, walThreshold);
  }

}
