/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.couchbase.lite.cbforest;

import java.util.HashMap;
import java.lang.ref.WeakReference;

public class Mappable {
  private static HashMap<Long, WeakReference<Mappable>> instances 
                        = new HashMap<Long, WeakReference<Mappable>>();

  private long swigCPtr;
  protected boolean swigCMemOwn;

  public Mappable(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
    // If derived add it.
    if (getClass() != Mappable.class) {
      instances.put(swigCPtr, new WeakReference<Mappable>(this));
    }
  }

  // Just the default one
  public static long getCPtr(Mappable obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  // Helper function that looks up given a pointer and 
  // either creates or returns it
  static Mappable createOrLookup(long arg) {
    if (instances.containsKey(arg)) {
      return instances.get(arg).get();
    }
    return new Mappable(arg,false);
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
  if (swigCPtr != 0) {
    // Unregister instance
    instances.remove(swigCPtr);
    if (swigCMemOwn) {
      swigCMemOwn = false;
      cbforestJNI.delete_Mappable(swigCPtr);
    }
    swigCPtr = 0;
  }
}

  public Mappable(Document doc) {
    this(cbforestJNI.new_Mappable(Document.getCPtr(doc), doc), true);
  }

}
