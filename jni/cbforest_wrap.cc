/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_cbforestJNI = NULL;
    jmethodID director_method_ids[2];
  }
}

typedef struct SWIGCDATA {
    char *data;
    int   len;
} SWIGCDATA;



static SWIGCDATA cdata_void(void *ptr, int nelements) {



   SWIGCDATA d;
   d.data = (char *) ptr;



   d.len  = nelements;

   return d;
}


static jbyteArray SWIG_JavaArrayOutCDATA(JNIEnv *jenv, char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


#include <stdint.h>		// Use the C99 official header


#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>


	#include "cbf_forestdb.h"
	#include "cbf_slice.h"
	#include "cbf_keystore.h"
	#include "cbf_document.h"
	#include "cbf_database.h"
	#include "cbf_docenumerator.h"
	#include "cbf_revid.h"
	#include "cbf_revtree.h"
	#include "cbf_versioneddocument.h"
	#include "cbf_collatable.h"
	#include "cbf_index.h"
	#include "cbf_mapreduceindex.h"

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< CBF::Revision * >::const_reference std_vector_Sl_CBF_Revision_Sm__Sg__get(std::vector< CBF::Revision * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_CBF_Revision_Sm__Sg__set(std::vector< CBF::Revision * > *self,int i,std::vector< CBF::Revision * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< CBF::Collatable >::const_reference std_vector_Sl_CBF_Collatable_Sg__get(std::vector< CBF::Collatable > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_CBF_Collatable_Sg__set(std::vector< CBF::Collatable > *self,int i,std::vector< CBF::Collatable >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< CBF::MapReduceIndex * >::const_reference std_vector_Sl_CBF_MapReduceIndex_Sm__Sg__get(std::vector< CBF::MapReduceIndex * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_CBF_MapReduceIndex_Sm__Sg__set(std::vector< CBF::MapReduceIndex * > *self,int i,std::vector< CBF::MapReduceIndex * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< CBF::KeyRange * >::const_reference std_vector_Sl_CBF_KeyRange_Sm__Sg__get(std::vector< CBF::KeyRange * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_CBF_KeyRange_Sm__Sg__set(std::vector< CBF::KeyRange * > *self,int i,std::vector< CBF::KeyRange * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< CBF::RevID * >::const_reference std_vector_Sl_CBF_RevID_Sm__Sg__get(std::vector< CBF::RevID * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_CBF_RevID_Sm__Sg__set(std::vector< CBF::RevID * > *self,int i,std::vector< CBF::RevID * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "cbforest_wrap.h"

SwigDirector_MapFn::SwigDirector_MapFn(JNIEnv *jenv) : CBF::MapFn(), Swig::Director(jenv) {
}

SwigDirector_MapFn::~SwigDirector_MapFn() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_MapFn::call(CBF::Mappable const &arg0, CBF::EmitFn &emit) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  jlong jemit = 0 ;
  
  if (!swig_override[0]) {
    CBF::MapFn::call(arg0,emit);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(CBF::Mappable **)&jarg0 = (CBF::Mappable *) &arg0; 
    *(CBF::EmitFn **)&jemit = (CBF::EmitFn *) &emit; 
    jenv->CallStaticVoidMethod(Swig::jclass_cbforestJNI, Swig::director_method_ids[0], swigjobj, jarg0, jemit);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CBF::MapFn::call ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MapFn::operator ()(forestdb::Mappable const &arg0, forestdb::EmitFn &emit) {
  CBF::MapFn::operator ()(arg0,emit);
}

void SwigDirector_MapFn::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "call", "(Lcom/couchbase/lite/cbforest/Mappable;Lcom/couchbase/lite/cbforest/EmitFn;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/couchbase/lite/cbforest/MapFn");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_MapReduceIndexer::SwigDirector_MapReduceIndexer(JNIEnv *jenv) : CBF::MapReduceIndexer(), Swig::Director(jenv) {
}

SwigDirector_MapReduceIndexer::~SwigDirector_MapReduceIndexer() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_MapReduceIndexer::bridgeAddDocument(forestdb::Document const &arg0) {
  CBF::MapReduceIndexer::bridgeAddDocument(arg0);
}

void SwigDirector_MapReduceIndexer::addDocument(CBF::Document const *arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  
  if (!swig_override[0]) {
    CBF::MapReduceIndexer::addDocument(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CBF::Document **)&jarg0) = (CBF::Document *) arg0; 
    jenv->CallStaticVoidMethod(Swig::jclass_cbforestJNI, Swig::director_method_ids[1], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CBF::MapReduceIndexer::addDocument ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MapReduceIndexer::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "addDocument", "(Lcom/couchbase/lite/cbforest/Document;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/couchbase/lite/cbforest/MapReduceIndexer");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jbyteArray JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_cdata(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jbyteArray jresult = 0 ;
  void *arg1 = (void *) 0 ;
  int arg2 ;
  SWIGCDATA result;
  
  (void)jenv;
  (void)jcls;
  arg2 = 1;
  arg1 = *(void **)&jarg1; 
  arg2 = (int)jarg2; 
  result = cdata_void(arg1,arg2);
  jresult = SWIG_JavaArrayOutCDATA(jenv, (char *)(&result)->data, (&result)->len); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_memmove(JNIEnv *jenv, jclass jcls, jlong jarg1, jbyteArray jarg2) {
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  memmove(arg1,(void const *)arg2,arg3);
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1VectorString_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1VectorString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorString_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorString_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorString_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorString_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorString_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorString_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1VectorString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1VectorRevision_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< CBF::Revision * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< CBF::Revision * > *)new std::vector< CBF::Revision * >();
  *(std::vector< CBF::Revision * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1VectorRevision_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< CBF::Revision * >::size_type arg1 ;
  std::vector< CBF::Revision * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< CBF::Revision * >::size_type)jarg1; 
  result = (std::vector< CBF::Revision * > *)new std::vector< CBF::Revision * >(arg1);
  *(std::vector< CBF::Revision * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorRevision_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< CBF::Revision * > *arg1 = (std::vector< CBF::Revision * > *) 0 ;
  std::vector< CBF::Revision * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::Revision * > **)&jarg1; 
  result = ((std::vector< CBF::Revision * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorRevision_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< CBF::Revision * > *arg1 = (std::vector< CBF::Revision * > *) 0 ;
  std::vector< CBF::Revision * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::Revision * > **)&jarg1; 
  result = ((std::vector< CBF::Revision * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorRevision_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< CBF::Revision * > *arg1 = (std::vector< CBF::Revision * > *) 0 ;
  std::vector< CBF::Revision * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::Revision * > **)&jarg1; 
  arg2 = (std::vector< CBF::Revision * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorRevision_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< CBF::Revision * > *arg1 = (std::vector< CBF::Revision * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::Revision * > **)&jarg1; 
  result = (bool)((std::vector< CBF::Revision * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorRevision_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< CBF::Revision * > *arg1 = (std::vector< CBF::Revision * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::Revision * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorRevision_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< CBF::Revision * > *arg1 = (std::vector< CBF::Revision * > *) 0 ;
  std::vector< CBF::Revision * >::value_type *arg2 = 0 ;
  std::vector< CBF::Revision * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< CBF::Revision * > **)&jarg1; 
  temp2 = *(std::vector< CBF::Revision * >::value_type *)&jarg2;
  arg2 = (std::vector< CBF::Revision * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< CBF::Revision * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorRevision_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< CBF::Revision * > *arg1 = (std::vector< CBF::Revision * > *) 0 ;
  int arg2 ;
  std::vector< CBF::Revision * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::Revision * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< CBF::Revision * >::value_type *) &std_vector_Sl_CBF_Revision_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< CBF::Revision * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorRevision_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< CBF::Revision * > *arg1 = (std::vector< CBF::Revision * > *) 0 ;
  int arg2 ;
  std::vector< CBF::Revision * >::value_type *arg3 = 0 ;
  std::vector< CBF::Revision * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< CBF::Revision * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< CBF::Revision * >::value_type *)&jarg3;
  arg3 = (std::vector< CBF::Revision * >::value_type *)&temp3; 
  try {
    std_vector_Sl_CBF_Revision_Sm__Sg__set(arg1,arg2,(CBF::Revision *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1VectorRevision(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< CBF::Revision * > *arg1 = (std::vector< CBF::Revision * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< CBF::Revision * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1VectorCollatable_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< CBF::Collatable > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< CBF::Collatable > *)new std::vector< CBF::Collatable >();
  *(std::vector< CBF::Collatable > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1VectorCollatable_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< CBF::Collatable >::size_type arg1 ;
  std::vector< CBF::Collatable > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< CBF::Collatable >::size_type)jarg1; 
  result = (std::vector< CBF::Collatable > *)new std::vector< CBF::Collatable >(arg1);
  *(std::vector< CBF::Collatable > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorCollatable_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< CBF::Collatable > *arg1 = (std::vector< CBF::Collatable > *) 0 ;
  std::vector< CBF::Collatable >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::Collatable > **)&jarg1; 
  result = ((std::vector< CBF::Collatable > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorCollatable_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< CBF::Collatable > *arg1 = (std::vector< CBF::Collatable > *) 0 ;
  std::vector< CBF::Collatable >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::Collatable > **)&jarg1; 
  result = ((std::vector< CBF::Collatable > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorCollatable_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< CBF::Collatable > *arg1 = (std::vector< CBF::Collatable > *) 0 ;
  std::vector< CBF::Collatable >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::Collatable > **)&jarg1; 
  arg2 = (std::vector< CBF::Collatable >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorCollatable_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< CBF::Collatable > *arg1 = (std::vector< CBF::Collatable > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::Collatable > **)&jarg1; 
  result = (bool)((std::vector< CBF::Collatable > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorCollatable_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< CBF::Collatable > *arg1 = (std::vector< CBF::Collatable > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::Collatable > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorCollatable_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< CBF::Collatable > *arg1 = (std::vector< CBF::Collatable > *) 0 ;
  std::vector< CBF::Collatable >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< CBF::Collatable > **)&jarg1; 
  arg2 = *(std::vector< CBF::Collatable >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< CBF::Collatable >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< CBF::Collatable >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorCollatable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< CBF::Collatable > *arg1 = (std::vector< CBF::Collatable > *) 0 ;
  int arg2 ;
  std::vector< CBF::Collatable >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::Collatable > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< CBF::Collatable >::value_type *) &std_vector_Sl_CBF_Collatable_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< CBF::Collatable >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorCollatable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< CBF::Collatable > *arg1 = (std::vector< CBF::Collatable > *) 0 ;
  int arg2 ;
  std::vector< CBF::Collatable >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< CBF::Collatable > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< CBF::Collatable >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< CBF::Collatable >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_CBF_Collatable_Sg__set(arg1,arg2,(CBF::Collatable const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1VectorCollatable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< CBF::Collatable > *arg1 = (std::vector< CBF::Collatable > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< CBF::Collatable > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1VectorMapReduceIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< CBF::MapReduceIndex * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< CBF::MapReduceIndex * > *)new std::vector< CBF::MapReduceIndex * >();
  *(std::vector< CBF::MapReduceIndex * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1VectorMapReduceIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< CBF::MapReduceIndex * >::size_type arg1 ;
  std::vector< CBF::MapReduceIndex * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< CBF::MapReduceIndex * >::size_type)jarg1; 
  result = (std::vector< CBF::MapReduceIndex * > *)new std::vector< CBF::MapReduceIndex * >(arg1);
  *(std::vector< CBF::MapReduceIndex * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorMapReduceIndex_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< CBF::MapReduceIndex * > *arg1 = (std::vector< CBF::MapReduceIndex * > *) 0 ;
  std::vector< CBF::MapReduceIndex * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::MapReduceIndex * > **)&jarg1; 
  result = ((std::vector< CBF::MapReduceIndex * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorMapReduceIndex_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< CBF::MapReduceIndex * > *arg1 = (std::vector< CBF::MapReduceIndex * > *) 0 ;
  std::vector< CBF::MapReduceIndex * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::MapReduceIndex * > **)&jarg1; 
  result = ((std::vector< CBF::MapReduceIndex * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorMapReduceIndex_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< CBF::MapReduceIndex * > *arg1 = (std::vector< CBF::MapReduceIndex * > *) 0 ;
  std::vector< CBF::MapReduceIndex * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::MapReduceIndex * > **)&jarg1; 
  arg2 = (std::vector< CBF::MapReduceIndex * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorMapReduceIndex_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< CBF::MapReduceIndex * > *arg1 = (std::vector< CBF::MapReduceIndex * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::MapReduceIndex * > **)&jarg1; 
  result = (bool)((std::vector< CBF::MapReduceIndex * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorMapReduceIndex_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< CBF::MapReduceIndex * > *arg1 = (std::vector< CBF::MapReduceIndex * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::MapReduceIndex * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorMapReduceIndex_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< CBF::MapReduceIndex * > *arg1 = (std::vector< CBF::MapReduceIndex * > *) 0 ;
  std::vector< CBF::MapReduceIndex * >::value_type *arg2 = 0 ;
  std::vector< CBF::MapReduceIndex * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< CBF::MapReduceIndex * > **)&jarg1; 
  temp2 = *(std::vector< CBF::MapReduceIndex * >::value_type *)&jarg2;
  arg2 = (std::vector< CBF::MapReduceIndex * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< CBF::MapReduceIndex * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorMapReduceIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< CBF::MapReduceIndex * > *arg1 = (std::vector< CBF::MapReduceIndex * > *) 0 ;
  int arg2 ;
  std::vector< CBF::MapReduceIndex * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::MapReduceIndex * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< CBF::MapReduceIndex * >::value_type *) &std_vector_Sl_CBF_MapReduceIndex_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< CBF::MapReduceIndex * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorMapReduceIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< CBF::MapReduceIndex * > *arg1 = (std::vector< CBF::MapReduceIndex * > *) 0 ;
  int arg2 ;
  std::vector< CBF::MapReduceIndex * >::value_type *arg3 = 0 ;
  std::vector< CBF::MapReduceIndex * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< CBF::MapReduceIndex * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< CBF::MapReduceIndex * >::value_type *)&jarg3;
  arg3 = (std::vector< CBF::MapReduceIndex * >::value_type *)&temp3; 
  try {
    std_vector_Sl_CBF_MapReduceIndex_Sm__Sg__set(arg1,arg2,(CBF::MapReduceIndex *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1VectorMapReduceIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< CBF::MapReduceIndex * > *arg1 = (std::vector< CBF::MapReduceIndex * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< CBF::MapReduceIndex * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1VectorKeyRange_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< CBF::KeyRange * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< CBF::KeyRange * > *)new std::vector< CBF::KeyRange * >();
  *(std::vector< CBF::KeyRange * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1VectorKeyRange_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< CBF::KeyRange * >::size_type arg1 ;
  std::vector< CBF::KeyRange * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< CBF::KeyRange * >::size_type)jarg1; 
  result = (std::vector< CBF::KeyRange * > *)new std::vector< CBF::KeyRange * >(arg1);
  *(std::vector< CBF::KeyRange * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorKeyRange_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< CBF::KeyRange * > *arg1 = (std::vector< CBF::KeyRange * > *) 0 ;
  std::vector< CBF::KeyRange * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::KeyRange * > **)&jarg1; 
  result = ((std::vector< CBF::KeyRange * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorKeyRange_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< CBF::KeyRange * > *arg1 = (std::vector< CBF::KeyRange * > *) 0 ;
  std::vector< CBF::KeyRange * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::KeyRange * > **)&jarg1; 
  result = ((std::vector< CBF::KeyRange * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorKeyRange_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< CBF::KeyRange * > *arg1 = (std::vector< CBF::KeyRange * > *) 0 ;
  std::vector< CBF::KeyRange * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::KeyRange * > **)&jarg1; 
  arg2 = (std::vector< CBF::KeyRange * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorKeyRange_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< CBF::KeyRange * > *arg1 = (std::vector< CBF::KeyRange * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::KeyRange * > **)&jarg1; 
  result = (bool)((std::vector< CBF::KeyRange * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorKeyRange_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< CBF::KeyRange * > *arg1 = (std::vector< CBF::KeyRange * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::KeyRange * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorKeyRange_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< CBF::KeyRange * > *arg1 = (std::vector< CBF::KeyRange * > *) 0 ;
  std::vector< CBF::KeyRange * >::value_type *arg2 = 0 ;
  std::vector< CBF::KeyRange * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< CBF::KeyRange * > **)&jarg1; 
  temp2 = *(std::vector< CBF::KeyRange * >::value_type *)&jarg2;
  arg2 = (std::vector< CBF::KeyRange * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< CBF::KeyRange * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorKeyRange_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< CBF::KeyRange * > *arg1 = (std::vector< CBF::KeyRange * > *) 0 ;
  int arg2 ;
  std::vector< CBF::KeyRange * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::KeyRange * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< CBF::KeyRange * >::value_type *) &std_vector_Sl_CBF_KeyRange_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< CBF::KeyRange * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorKeyRange_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< CBF::KeyRange * > *arg1 = (std::vector< CBF::KeyRange * > *) 0 ;
  int arg2 ;
  std::vector< CBF::KeyRange * >::value_type *arg3 = 0 ;
  std::vector< CBF::KeyRange * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< CBF::KeyRange * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< CBF::KeyRange * >::value_type *)&jarg3;
  arg3 = (std::vector< CBF::KeyRange * >::value_type *)&temp3; 
  try {
    std_vector_Sl_CBF_KeyRange_Sm__Sg__set(arg1,arg2,(CBF::KeyRange *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1VectorKeyRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< CBF::KeyRange * > *arg1 = (std::vector< CBF::KeyRange * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< CBF::KeyRange * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1VectorRevID_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< CBF::RevID * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< CBF::RevID * > *)new std::vector< CBF::RevID * >();
  *(std::vector< CBF::RevID * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1VectorRevID_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< CBF::RevID * >::size_type arg1 ;
  std::vector< CBF::RevID * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< CBF::RevID * >::size_type)jarg1; 
  result = (std::vector< CBF::RevID * > *)new std::vector< CBF::RevID * >(arg1);
  *(std::vector< CBF::RevID * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorRevID_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< CBF::RevID * > *arg1 = (std::vector< CBF::RevID * > *) 0 ;
  std::vector< CBF::RevID * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::RevID * > **)&jarg1; 
  result = ((std::vector< CBF::RevID * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorRevID_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< CBF::RevID * > *arg1 = (std::vector< CBF::RevID * > *) 0 ;
  std::vector< CBF::RevID * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::RevID * > **)&jarg1; 
  result = ((std::vector< CBF::RevID * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorRevID_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< CBF::RevID * > *arg1 = (std::vector< CBF::RevID * > *) 0 ;
  std::vector< CBF::RevID * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::RevID * > **)&jarg1; 
  arg2 = (std::vector< CBF::RevID * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorRevID_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< CBF::RevID * > *arg1 = (std::vector< CBF::RevID * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::RevID * > **)&jarg1; 
  result = (bool)((std::vector< CBF::RevID * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorRevID_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< CBF::RevID * > *arg1 = (std::vector< CBF::RevID * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::RevID * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorRevID_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< CBF::RevID * > *arg1 = (std::vector< CBF::RevID * > *) 0 ;
  std::vector< CBF::RevID * >::value_type *arg2 = 0 ;
  std::vector< CBF::RevID * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< CBF::RevID * > **)&jarg1; 
  temp2 = *(std::vector< CBF::RevID * >::value_type *)&jarg2;
  arg2 = (std::vector< CBF::RevID * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< CBF::RevID * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorRevID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< CBF::RevID * > *arg1 = (std::vector< CBF::RevID * > *) 0 ;
  int arg2 ;
  std::vector< CBF::RevID * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< CBF::RevID * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< CBF::RevID * >::value_type *) &std_vector_Sl_CBF_RevID_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< CBF::RevID * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VectorRevID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< CBF::RevID * > *arg1 = (std::vector< CBF::RevID * > *) 0 ;
  int arg2 ;
  std::vector< CBF::RevID * >::value_type *arg3 = 0 ;
  std::vector< CBF::RevID * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< CBF::RevID * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< CBF::RevID * >::value_type *)&jarg3;
  arg3 = (std::vector< CBF::RevID * >::value_type *)&temp3; 
  try {
    std_vector_Sl_CBF_RevID_Sm__Sg__set(arg1,arg2,(CBF::RevID *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1VectorRevID(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< CBF::RevID * > *arg1 = (std::vector< CBF::RevID * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< CBF::RevID * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_kDefaultContent_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  CBF::ContentOptions result;
  
  (void)jenv;
  (void)jcls;
  result = (CBF::ContentOptions)CBF::kDefaultContent;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_kMetaOnly_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  CBF::ContentOptions result;
  
  (void)jenv;
  (void)jcls;
  result = (CBF::ContentOptions)CBF::kMetaOnly;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_FDB_1OPEN_1FLAG_1CREATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  CBF::OpenFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (CBF::OpenFlags)CBF::FDB_OPEN_FLAG_CREATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_FDB_1OPEN_1FLAG_1RDONLY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  CBF::OpenFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (CBF::OpenFlags)CBF::FDB_OPEN_FLAG_RDONLY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1KvsInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CBF::KvsInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CBF::KvsInfo *)new CBF::KvsInfo();
  *(CBF::KvsInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KvsInfo_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CBF::KvsInfo *arg1 = (CBF::KvsInfo *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::KvsInfo **)&jarg1; 
  result = (char *)(arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KvsInfo_1getLastSeqnum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  CBF::KvsInfo *arg1 = (CBF::KvsInfo *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::KvsInfo **)&jarg1; 
  result = (uint64_t)(arg1)->getLastSeqnum();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KvsInfo_1getDocCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  CBF::KvsInfo *arg1 = (CBF::KvsInfo *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::KvsInfo **)&jarg1; 
  result = (uint64_t)(arg1)->getDocCount();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KvsInfo_1getSpaceUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  CBF::KvsInfo *arg1 = (CBF::KvsInfo *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::KvsInfo **)&jarg1; 
  result = (uint64_t)(arg1)->getSpaceUsed();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1KvsInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::KvsInfo *arg1 = (CBF::KvsInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::KvsInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1FileInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CBF::FileInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CBF::FileInfo *)new CBF::FileInfo();
  *(CBF::FileInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_FileInfo_1getFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CBF::FileInfo *arg1 = (CBF::FileInfo *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::FileInfo **)&jarg1; 
  result = (char *)(arg1)->getFilename();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_FileInfo_1getNewFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CBF::FileInfo *arg1 = (CBF::FileInfo *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::FileInfo **)&jarg1; 
  result = (char *)(arg1)->getNewFilename();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_FileInfo_1getDocCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  CBF::FileInfo *arg1 = (CBF::FileInfo *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::FileInfo **)&jarg1; 
  result = (uint64_t)(arg1)->getDocCount();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_FileInfo_1getSpaceUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  CBF::FileInfo *arg1 = (CBF::FileInfo *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::FileInfo **)&jarg1; 
  result = (uint64_t)(arg1)->getSpaceUsed();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_FileInfo_1getFileSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  CBF::FileInfo *arg1 = (CBF::FileInfo *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::FileInfo **)&jarg1; 
  result = (uint64_t)(arg1)->getFileSize();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1FileInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::FileInfo *arg1 = (CBF::FileInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::FileInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1Config(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CBF::Config *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CBF::Config *)new CBF::Config();
  *(CBF::Config **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1getBlocksize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  result = (uint32_t)((CBF::Config const *)arg1)->getBlocksize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1setBlocksize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->setBlocksize(arg2);
}


SWIGEXPORT jobject JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1getBuffercacheSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  result = (uint64_t)((CBF::Config const *)arg1)->getBuffercacheSize();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1setBuffercacheSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  (arg1)->setBuffercacheSize(arg2);
}


SWIGEXPORT jint JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1getChunksize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  result = (uint16_t)((CBF::Config const *)arg1)->getChunksize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1setChunksize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  (arg1)->setChunksize(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1isCleanupCacheOnclose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  result = (bool)((CBF::Config const *)arg1)->isCleanupCacheOnclose();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1setCleanupCacheOnclose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setCleanupCacheOnclose(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1getCompactionBufMaxsize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  result = (uint32_t)((CBF::Config const *)arg1)->getCompactionBufMaxsize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1setCompactionBufMaxsize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->setCompactionBufMaxsize(arg2);
}


SWIGEXPORT jobject JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1getCompactionMinimumFilesize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  result = (uint64_t)((CBF::Config const *)arg1)->getCompactionMinimumFilesize();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1setCompactionMinimumFilesize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  (arg1)->setCompactionMinimumFilesize(arg2);
}


SWIGEXPORT jshort JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1getCompactionThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  result = (uint8_t)((CBF::Config const *)arg1)->getCompactionThreshold();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1setCompactionThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  (arg1)->setCompactionThreshold(arg2);
}


SWIGEXPORT jobject JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1getCompactorSleepDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  result = (uint64_t)((CBF::Config const *)arg1)->getCompactorSleepDuration();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1setCompactorSleepDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  (arg1)->setCompactorSleepDuration(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1isCompressDocumentBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  result = (bool)((CBF::Config const *)arg1)->isCompressDocumentBody();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1setCompressDocumentBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setCompressDocumentBody(arg2);
}


SWIGEXPORT jint JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1getFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  CBF::OpenFlags result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  result = (CBF::OpenFlags)((CBF::Config const *)arg1)->getFlags();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1setFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  CBF::OpenFlags arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  arg2 = (CBF::OpenFlags)jarg2; 
  (arg1)->setFlags(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1getPurgingInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  result = (uint32_t)((CBF::Config const *)arg1)->getPurgingInterval();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1setPurgingInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->setPurgingInterval(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1isWalFlushBeforeCommit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  result = (bool)((CBF::Config const *)arg1)->isWalFlushBeforeCommit();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1setWalFlushBeforeCommit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setWalFlushBeforeCommit(arg2);
}


SWIGEXPORT jobject JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1getWalThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  result = (uint64_t)((CBF::Config const *)arg1)->getWalThreshold();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Config_1setWalThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Config **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  (arg1)->setWalThreshold(arg2);
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1Config(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::Config *arg1 = (CBF::Config *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::Config **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1Slice_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CBF::Slice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CBF::Slice *)new CBF::Slice();
  *(CBF::Slice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1Slice_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  CBF::Slice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (jarg1) {
      arg1 = (char *) jenv->GetByteArrayElements(jarg1, 0);
      arg2 = (size_t) jenv->GetArrayLength(jarg1);
    } else {
      arg1 = 0;
      arg2 = 0;
    }
  }
  result = (CBF::Slice *)new CBF::Slice((char const *)arg1,arg2);
  *(CBF::Slice **)&jresult = result; 
  {
    if (jarg1) jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg1, 0);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1Slice(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::Slice *arg1 = (CBF::Slice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::Slice **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jbyteArray JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Slice_1getBuf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  CBF::Slice *arg1 = (CBF::Slice *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Slice **)&jarg1; 
  result = (char *)(arg1)->getBuf();
  {
    if(result == NULL) return NULL;
    size_t size = (arg1)->getSize();
    jresult = jenv->NewByteArray(size);
    jenv->SetByteArrayRegion(jresult, 0, size, (const jbyte*)result);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Slice_1compare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  CBF::Slice *arg1 = (CBF::Slice *) 0 ;
  CBF::Slice *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::Slice **)&jarg1; 
  arg2 = *(CBF::Slice **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return 0;
  } 
  result = (int)(arg1)->compare(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Slice_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Slice *arg1 = (CBF::Slice *) 0 ;
  CBF::Slice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Slice **)&jarg1; 
  result = (CBF::Slice *)(arg1)->copy();
  *(CBF::Slice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Slice_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CBF::Slice *arg1 = (CBF::Slice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Slice **)&jarg1; 
  (arg1)->free();
}


SWIGEXPORT jint JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Slice_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CBF::Slice *arg1 = (CBF::Slice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Slice **)&jarg1; 
  result = (int)(arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Slice_1getData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Slice *arg1 = (CBF::Slice *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Slice **)&jarg1; 
  result = (void *)(arg1)->getData();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1KeyStore_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CBF::Database *arg1 = 0 ;
  std::string arg2 ;
  CBF::KeyStore *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Database **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Database & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (CBF::KeyStore *)new CBF::KeyStore(*arg1,arg2);
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  *(CBF::KeyStore **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1KeyStore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::KeyStore *arg1 = (CBF::KeyStore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::KeyStore **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KeyStore_1getKvsInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::KeyStore *arg1 = (CBF::KeyStore *) 0 ;
  CBF::KvsInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::KeyStore **)&jarg1; 
  {
    try {
      result = ((CBF::KeyStore const *)arg1)->getKvsInfo();
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  *(CBF::KvsInfo **)&jresult = new CBF::KvsInfo((const CBF::KvsInfo &)result); 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KeyStore_1getLastSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  CBF::KeyStore *arg1 = (CBF::KeyStore *) 0 ;
  CBF::Sequence result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::KeyStore **)&jarg1; 
  {
    try {
      result = (CBF::Sequence)((CBF::KeyStore const *)arg1)->getLastSequence();
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KeyStore_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CBF::KeyStore *arg1 = (CBF::KeyStore *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::KeyStore **)&jarg1; 
  result = ((CBF::KeyStore const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KeyStore_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  CBF::KeyStore *arg1 = (CBF::KeyStore *) 0 ;
  CBF::Slice *arg2 = 0 ;
  CBF::ContentOptions arg3 ;
  CBF::Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::KeyStore **)&jarg1; 
  arg2 = *(CBF::Slice **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return 0;
  } 
  arg3 = (CBF::ContentOptions)jarg3; 
  {
    try {
      result = (CBF::Document *)((CBF::KeyStore const *)arg1)->get(*arg2,arg3);
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  *(CBF::Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KeyStore_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  CBF::KeyStore *arg1 = (CBF::KeyStore *) 0 ;
  CBF::Slice *arg2 = 0 ;
  CBF::Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::KeyStore **)&jarg1; 
  arg2 = *(CBF::Slice **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return 0;
  } 
  {
    try {
      result = (CBF::Document *)((CBF::KeyStore const *)arg1)->get(*arg2);
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  *(CBF::Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KeyStore_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jint jarg3) {
  jlong jresult = 0 ;
  CBF::KeyStore *arg1 = (CBF::KeyStore *) 0 ;
  CBF::Sequence arg2 ;
  CBF::ContentOptions arg3 ;
  CBF::Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::KeyStore **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (CBF::Sequence)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = (CBF::ContentOptions)jarg3; 
  {
    try {
      result = (CBF::Document *)((CBF::KeyStore const *)arg1)->get(arg2,arg3);
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  *(CBF::Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KeyStore_1get_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jlong jresult = 0 ;
  CBF::KeyStore *arg1 = (CBF::KeyStore *) 0 ;
  CBF::Sequence arg2 ;
  CBF::Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::KeyStore **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (CBF::Sequence)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      result = (CBF::Document *)((CBF::KeyStore const *)arg1)->get(arg2);
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  *(CBF::Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KeyStore_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  CBF::KeyStore *arg1 = (CBF::KeyStore *) 0 ;
  CBF::Document *arg2 = 0 ;
  CBF::ContentOptions arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::KeyStore **)&jarg1; 
  arg2 = *(CBF::Document **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Document & reference is null");
    return 0;
  } 
  arg3 = (CBF::ContentOptions)jarg3; 
  {
    try {
      result = (bool)((CBF::KeyStore const *)arg1)->read(*arg2,arg3);
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KeyStore_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  CBF::KeyStore *arg1 = (CBF::KeyStore *) 0 ;
  CBF::Document *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::KeyStore **)&jarg1; 
  arg2 = *(CBF::Document **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Document & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((CBF::KeyStore const *)arg1)->read(*arg2);
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KeyStore_1getByOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jobject jarg3) {
  jlong jresult = 0 ;
  CBF::KeyStore *arg1 = (CBF::KeyStore *) 0 ;
  uint64_t arg2 ;
  CBF::Sequence arg3 ;
  CBF::Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::KeyStore **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (CBF::Sequence)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      result = (CBF::Document *)(arg1)->getByOffset(arg2,arg3);
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  *(CBF::Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KeyStore_1deleteKeyStore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CBF::KeyStore *arg1 = (CBF::KeyStore *) 0 ;
  CBF::Transaction *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::KeyStore **)&jarg1; 
  arg2 = *(CBF::Transaction **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Transaction & reference is null");
    return ;
  } 
  (arg1)->deleteKeyStore(*arg2);
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KeyStore_1erase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CBF::KeyStore *arg1 = (CBF::KeyStore *) 0 ;
  CBF::Transaction *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::KeyStore **)&jarg1; 
  arg2 = *(CBF::Transaction **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Transaction & reference is null");
    return ;
  } 
  (arg1)->erase(*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1KeyStoreWriter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  CBF::KeyStore *arg1 = 0 ;
  forestdb::Transaction *arg2 = 0 ;
  CBF::KeyStoreWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::KeyStore **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::KeyStore & reference is null");
    return 0;
  } 
  arg2 = *(forestdb::Transaction **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "forestdb::Transaction & reference is null");
    return 0;
  } 
  result = (CBF::KeyStoreWriter *)new CBF::KeyStoreWriter(*arg1,*arg2);
  *(CBF::KeyStoreWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1KeyStoreWriter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::KeyStoreWriter *arg1 = (CBF::KeyStoreWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::KeyStoreWriter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jobject JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KeyStoreWriter_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jobject jresult = 0 ;
  CBF::KeyStoreWriter *arg1 = (CBF::KeyStoreWriter *) 0 ;
  CBF::Slice *arg2 = 0 ;
  CBF::Slice *arg3 = 0 ;
  CBF::Slice *arg4 = 0 ;
  CBF::Sequence result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(CBF::KeyStoreWriter **)&jarg1; 
  arg2 = *(CBF::Slice **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return 0;
  } 
  arg3 = *(CBF::Slice **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return 0;
  } 
  arg4 = *(CBF::Slice **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return 0;
  } 
  {
    try {
      result = (CBF::Sequence)(arg1)->set(*arg2,*arg3,*arg4);
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KeyStoreWriter_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jobject jresult = 0 ;
  CBF::KeyStoreWriter *arg1 = (CBF::KeyStoreWriter *) 0 ;
  CBF::Slice *arg2 = 0 ;
  CBF::Slice *arg3 = 0 ;
  CBF::Sequence result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CBF::KeyStoreWriter **)&jarg1; 
  arg2 = *(CBF::Slice **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return 0;
  } 
  arg3 = *(CBF::Slice **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return 0;
  } 
  {
    try {
      result = (CBF::Sequence)(arg1)->set(*arg2,*arg3);
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KeyStoreWriter_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CBF::KeyStoreWriter *arg1 = (CBF::KeyStoreWriter *) 0 ;
  CBF::Document *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::KeyStoreWriter **)&jarg1; 
  arg2 = *(CBF::Document **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Document & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->write(*arg2);
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KeyStoreWriter_1del_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  CBF::KeyStoreWriter *arg1 = (CBF::KeyStoreWriter *) 0 ;
  CBF::Slice *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::KeyStoreWriter **)&jarg1; 
  arg2 = *(CBF::Slice **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->del(*arg2);
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KeyStoreWriter_1del_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jboolean jresult = 0 ;
  CBF::KeyStoreWriter *arg1 = (CBF::KeyStoreWriter *) 0 ;
  CBF::Sequence arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::KeyStoreWriter **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (CBF::Sequence)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      result = (bool)(arg1)->del(arg2);
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KeyStoreWriter_1del_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  CBF::KeyStoreWriter *arg1 = (CBF::KeyStoreWriter *) 0 ;
  CBF::Document *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::KeyStoreWriter **)&jarg1; 
  arg2 = *(CBF::Document **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Document & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->del(*arg2);
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KeyStoreWriter_1rollbackTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  CBF::KeyStoreWriter *arg1 = (CBF::KeyStoreWriter *) 0 ;
  CBF::Sequence arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::KeyStoreWriter **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (CBF::Sequence)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      (arg1)->rollbackTo(arg2);
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1Document_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CBF::Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CBF::Document *)new CBF::Document();
  *(CBF::Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1Document_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Slice *arg1 = 0 ;
  CBF::Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Slice **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return 0;
  } 
  result = (CBF::Document *)new CBF::Document(*arg1);
  *(CBF::Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1Document(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::Document *arg1 = (CBF::Document *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::Document **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Document_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Document *arg1 = (CBF::Document *) 0 ;
  CBF::Slice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Document **)&jarg1; 
  result = (CBF::Slice *)(arg1)->getKey();
  *(CBF::Slice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Document_1getMeta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Document *arg1 = (CBF::Document *) 0 ;
  CBF::Slice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Document **)&jarg1; 
  result = (CBF::Slice *)(arg1)->getMeta();
  *(CBF::Slice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Document_1getBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Document *arg1 = (CBF::Document *) 0 ;
  CBF::Slice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Document **)&jarg1; 
  result = (CBF::Slice *)(arg1)->getBody();
  *(CBF::Slice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Document_1setKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CBF::Document *arg1 = (CBF::Document *) 0 ;
  CBF::Slice *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::Document **)&jarg1; 
  arg2 = *(CBF::Slice **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return ;
  } 
  (arg1)->setKey(*arg2);
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Document_1setMeta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CBF::Document *arg1 = (CBF::Document *) 0 ;
  CBF::Slice *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::Document **)&jarg1; 
  arg2 = *(CBF::Slice **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return ;
  } 
  (arg1)->setMeta(*arg2);
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Document_1setBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CBF::Document *arg1 = (CBF::Document *) 0 ;
  CBF::Slice *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::Document **)&jarg1; 
  arg2 = *(CBF::Slice **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return ;
  } 
  (arg1)->setBody(*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Document_1resizeMeta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  CBF::Document *arg1 = (CBF::Document *) 0 ;
  size_t arg2 ;
  CBF::Slice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Document **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (CBF::Slice *)(arg1)->resizeMeta(arg2);
    } catch (std::bad_alloc& ba) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, "bad_alloc caught");
      return 0;
    }
  }
  *(CBF::Slice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Document_1clearMetaAndBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CBF::Document *arg1 = (CBF::Document *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Document **)&jarg1; 
  (arg1)->clearMetaAndBody();
}


SWIGEXPORT jobject JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Document_1getSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  CBF::Document *arg1 = (CBF::Document *) 0 ;
  CBF::Sequence result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Document **)&jarg1; 
  result = (CBF::Sequence)((CBF::Document const *)arg1)->getSequence();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Document_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  CBF::Document *arg1 = (CBF::Document *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Document **)&jarg1; 
  result = (uint64_t)((CBF::Document const *)arg1)->offset();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Document_1sizeOnDisk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Document *arg1 = (CBF::Document *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Document **)&jarg1; 
  result = ((CBF::Document const *)arg1)->sizeOnDisk();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Document_1deleted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::Document *arg1 = (CBF::Document *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Document **)&jarg1; 
  result = (bool)((CBF::Document const *)arg1)->deleted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Document_1exists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::Document *arg1 = (CBF::Document *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Document **)&jarg1; 
  result = (bool)((CBF::Document const *)arg1)->exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Document_1valid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::Document *arg1 = (CBF::Document *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Document **)&jarg1; 
  result = (bool)((CBF::Document const *)arg1)->valid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Document_1updateSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  CBF::Document *arg1 = (CBF::Document *) 0 ;
  CBF::Sequence arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Document **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (CBF::Sequence)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  (arg1)->updateSequence(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Database_1defaultConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CBF::Config result;
  
  (void)jenv;
  (void)jcls;
  result = CBF::Database::defaultConfig();
  *(CBF::Config **)&jresult = new CBF::Config((const CBF::Config &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1Database(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string arg1 ;
  CBF::Config *arg2 = 0 ;
  CBF::Database *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(CBF::Config **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Config const & reference is null");
    return 0;
  } 
  {
    try {
      result = (CBF::Database *)new CBF::Database(arg1,(CBF::Config const &)*arg2);
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  *(CBF::Database **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1Database(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::Database *arg1 = (CBF::Database *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::Database **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Database_1getFileInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Database *arg1 = (CBF::Database *) 0 ;
  CBF::FileInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Database **)&jarg1; 
  {
    try {
      result = ((CBF::Database const *)arg1)->getFileInfo();
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  *(CBF::FileInfo **)&jresult = new CBF::FileInfo((const CBF::FileInfo &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Database_1getFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CBF::Database *arg1 = (CBF::Database *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Database **)&jarg1; 
  result = ((CBF::Database const *)arg1)->getFilename();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Database_1isReadOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::Database *arg1 = (CBF::Database *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Database **)&jarg1; 
  result = (bool)((CBF::Database const *)arg1)->isReadOnly();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Database_1deleteDatabase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CBF::Database *arg1 = (CBF::Database *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Database **)&jarg1; 
  (arg1)->deleteDatabase();
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Database_1erase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CBF::Database *arg1 = (CBF::Database *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Database **)&jarg1; 
  (arg1)->erase();
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Database_1compact(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CBF::Database *arg1 = (CBF::Database *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Database **)&jarg1; 
  {
    try {
      (arg1)->compact();
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Database_1commit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CBF::Database *arg1 = (CBF::Database *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Database **)&jarg1; 
  {
    try {
      (arg1)->commit();
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1Transaction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Database *arg1 = (CBF::Database *) 0 ;
  CBF::Transaction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Database **)&jarg1; 
  result = (CBF::Transaction *)new CBF::Transaction(arg1);
  *(CBF::Transaction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1Transaction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::Transaction *arg1 = (CBF::Transaction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::Transaction **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Transaction_1toKeyStoreWriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  CBF::Transaction *arg1 = (CBF::Transaction *) 0 ;
  CBF::KeyStore *arg2 = 0 ;
  CBF::KeyStoreWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::Transaction **)&jarg1; 
  arg2 = *(CBF::KeyStore **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::KeyStore & reference is null");
    return 0;
  } 
  result = (CBF::KeyStoreWriter *)(arg1)->toKeyStoreWriter(*arg2);
  *(CBF::KeyStoreWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Transaction_1getDatabase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Transaction *arg1 = (CBF::Transaction *) 0 ;
  CBF::Database *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Transaction **)&jarg1; 
  result = (CBF::Database *)(arg1)->getDatabase();
  *(CBF::Database **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Transaction_1state(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CBF::Transaction *arg1 = (CBF::Transaction *) 0 ;
  CBF::Transaction::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Transaction **)&jarg1; 
  result = (CBF::Transaction::State)((CBF::Transaction const *)arg1)->state();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Transaction_1abort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CBF::Transaction *arg1 = (CBF::Transaction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Transaction **)&jarg1; 
  (arg1)->abort();
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1DocEnumerator_1Options(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CBF::DocEnumerator::Options *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CBF::DocEnumerator::Options *)new CBF::DocEnumerator::Options();
  *(CBF::DocEnumerator::Options **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1DocEnumerator_1Options(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::DocEnumerator::Options *arg1 = (CBF::DocEnumerator::Options *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::DocEnumerator::Options **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_DocEnumerator_1Options_1getContentOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CBF::DocEnumerator::Options *arg1 = (CBF::DocEnumerator::Options *) 0 ;
  CBF::ContentOptions result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::DocEnumerator::Options **)&jarg1; 
  result = (CBF::ContentOptions)(arg1)->getContentOption();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_DocEnumerator_1Options_1setContentOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CBF::DocEnumerator::Options *arg1 = (CBF::DocEnumerator::Options *) 0 ;
  CBF::ContentOptions arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::DocEnumerator::Options **)&jarg1; 
  arg2 = (CBF::ContentOptions)jarg2; 
  (arg1)->setContentOption(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_DocEnumerator_1Options_1isIncludeDeleted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::DocEnumerator::Options *arg1 = (CBF::DocEnumerator::Options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::DocEnumerator::Options **)&jarg1; 
  result = (bool)((CBF::DocEnumerator::Options const *)arg1)->isIncludeDeleted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_DocEnumerator_1Options_1setIncludeDeleted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  CBF::DocEnumerator::Options *arg1 = (CBF::DocEnumerator::Options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::DocEnumerator::Options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIncludeDeleted(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_DocEnumerator_1Options_1isInclusiveEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::DocEnumerator::Options *arg1 = (CBF::DocEnumerator::Options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::DocEnumerator::Options **)&jarg1; 
  result = (bool)((CBF::DocEnumerator::Options const *)arg1)->isInclusiveEnd();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_DocEnumerator_1Options_1setInclusiveEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  CBF::DocEnumerator::Options *arg1 = (CBF::DocEnumerator::Options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::DocEnumerator::Options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInclusiveEnd(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_DocEnumerator_1Options_1isInclusiveStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::DocEnumerator::Options *arg1 = (CBF::DocEnumerator::Options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::DocEnumerator::Options **)&jarg1; 
  result = (bool)((CBF::DocEnumerator::Options const *)arg1)->isInclusiveStart();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_DocEnumerator_1Options_1setInclusiveStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  CBF::DocEnumerator::Options *arg1 = (CBF::DocEnumerator::Options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::DocEnumerator::Options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInclusiveStart(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_DocEnumerator_1Options_1getLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::DocEnumerator::Options *arg1 = (CBF::DocEnumerator::Options *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::DocEnumerator::Options **)&jarg1; 
  result = (unsigned int)((CBF::DocEnumerator::Options const *)arg1)->getLimit();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_DocEnumerator_1Options_1setLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CBF::DocEnumerator::Options *arg1 = (CBF::DocEnumerator::Options *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::DocEnumerator::Options **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setLimit(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_DocEnumerator_1Options_1getSkip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::DocEnumerator::Options *arg1 = (CBF::DocEnumerator::Options *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::DocEnumerator::Options **)&jarg1; 
  result = (unsigned int)((CBF::DocEnumerator::Options const *)arg1)->getSkip();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_DocEnumerator_1Options_1setSkip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CBF::DocEnumerator::Options *arg1 = (CBF::DocEnumerator::Options *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::DocEnumerator::Options **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setSkip(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_DocEnumerator_1Options_1isDescending(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::DocEnumerator::Options *arg1 = (CBF::DocEnumerator::Options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::DocEnumerator::Options **)&jarg1; 
  result = (bool)((CBF::DocEnumerator::Options const *)arg1)->isDescending();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_DocEnumerator_1Options_1setDescending(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  CBF::DocEnumerator::Options *arg1 = (CBF::DocEnumerator::Options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::DocEnumerator::Options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDescending(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1DocEnumerator_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CBF::DocEnumerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (CBF::DocEnumerator *)new CBF::DocEnumerator();
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  *(CBF::DocEnumerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1DocEnumerator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  CBF::KeyStore *arg1 = 0 ;
  CBF::Slice *arg2 = 0 ;
  CBF::Slice *arg3 = 0 ;
  CBF::DocEnumerator::Options arg4 ;
  CBF::DocEnumerator::Options const *argp4 ;
  CBF::DocEnumerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(CBF::KeyStore **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::KeyStore & reference is null");
    return 0;
  } 
  arg2 = *(CBF::Slice **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice const & reference is null");
    return 0;
  } 
  arg3 = *(CBF::Slice **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice const & reference is null");
    return 0;
  } 
  argp4 = *(CBF::DocEnumerator::Options **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CBF::DocEnumerator::Options const");
    return 0;
  }
  arg4 = *argp4; 
  {
    try {
      result = (CBF::DocEnumerator *)new CBF::DocEnumerator(*arg1,(CBF::Slice const &)*arg2,(CBF::Slice const &)*arg3,arg4);
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  *(CBF::DocEnumerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1DocEnumerator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  CBF::KeyStore *arg1 = 0 ;
  std::vector< std::string > *arg2 = 0 ;
  CBF::DocEnumerator::Options arg3 ;
  CBF::DocEnumerator::Options const *argp3 ;
  CBF::DocEnumerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CBF::KeyStore **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::KeyStore & reference is null");
    return 0;
  } 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return 0;
  } 
  argp3 = *(CBF::DocEnumerator::Options **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CBF::DocEnumerator::Options const");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (CBF::DocEnumerator *)new CBF::DocEnumerator(*arg1,*arg2,arg3);
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  *(CBF::DocEnumerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1DocEnumerator_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jobject jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  CBF::KeyStore *arg1 = 0 ;
  CBF::Sequence arg2 ;
  CBF::Sequence arg3 ;
  CBF::DocEnumerator::Options arg4 ;
  CBF::DocEnumerator::Options const *argp4 ;
  CBF::DocEnumerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(CBF::KeyStore **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::KeyStore & reference is null");
    return 0;
  } 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (CBF::Sequence)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (CBF::Sequence)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  argp4 = *(CBF::DocEnumerator::Options **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CBF::DocEnumerator::Options const");
    return 0;
  }
  arg4 = *argp4; 
  {
    try {
      result = (CBF::DocEnumerator *)new CBF::DocEnumerator(*arg1,arg2,arg3,arg4);
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  *(CBF::DocEnumerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1DocEnumerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::DocEnumerator *arg1 = (CBF::DocEnumerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::DocEnumerator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_DocEnumerator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::DocEnumerator *arg1 = (CBF::DocEnumerator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::DocEnumerator **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->next();
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_DocEnumerator_1seek(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CBF::DocEnumerator *arg1 = (CBF::DocEnumerator *) 0 ;
  CBF::Slice *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::DocEnumerator **)&jarg1; 
  arg2 = *(CBF::Slice **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->seek(*arg2);
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_DocEnumerator_1doc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::DocEnumerator *arg1 = (CBF::DocEnumerator *) 0 ;
  CBF::Document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::DocEnumerator **)&jarg1; 
  {
    try {
      result = (CBF::Document *)(arg1)->doc();
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  *(CBF::Document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_DocEnumerator_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CBF::DocEnumerator *arg1 = (CBF::DocEnumerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::DocEnumerator **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1RevID_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CBF::RevID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CBF::RevID *)new CBF::RevID();
  *(CBF::RevID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1RevID_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  CBF::RevID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  result = (CBF::RevID *)new CBF::RevID((char const *)arg1,arg2);
  *(CBF::RevID **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1RevID_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  CBF::RevID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (CBF::RevID *)new CBF::RevID((char const *)arg1);
  *(CBF::RevID **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1RevID(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::RevID *arg1 = (CBF::RevID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::RevID **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevID_1isCompressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::RevID *arg1 = (CBF::RevID *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::RevID **)&jarg1; 
  result = (bool)((CBF::RevID const *)arg1)->isCompressed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevID_1expanded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::RevID *arg1 = (CBF::RevID *) 0 ;
  CBF::Slice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::RevID **)&jarg1; 
  result = (CBF::Slice *)((CBF::RevID const *)arg1)->expanded();
  *(CBF::Slice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevID_1expandedSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::RevID *arg1 = (CBF::RevID *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::RevID **)&jarg1; 
  result = ((CBF::RevID const *)arg1)->expandedSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevID_1expandInto(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  CBF::RevID *arg1 = (CBF::RevID *) 0 ;
  CBF::Slice *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::RevID **)&jarg1; 
  arg2 = *(CBF::Slice **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return 0;
  } 
  result = (bool)((CBF::RevID const *)arg1)->expandInto(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevID_1generation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::RevID *arg1 = (CBF::RevID *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::RevID **)&jarg1; 
  {
    try {
      result = (unsigned int)((CBF::RevID const *)arg1)->generation();
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevID_1digest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::RevID *arg1 = (CBF::RevID *) 0 ;
  CBF::Slice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::RevID **)&jarg1; 
  {
    try {
      result = (CBF::Slice *)((CBF::RevID const *)arg1)->digest();
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  *(CBF::Slice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevID_1getBuf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  CBF::RevID *arg1 = (CBF::RevID *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::RevID **)&jarg1; 
  result = (char *)(arg1)->getBuf();
  {
    if(result == NULL) return NULL;
    size_t size = (arg1)->getBufSize();
    jresult = jenv->NewByteArray(size);
    jenv->SetByteArrayRegion(jresult, 0, size, (const jbyte*)result);
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevID_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CBF::RevID *arg1 = (CBF::RevID *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::RevID **)&jarg1; 
  result = (char *)(arg1)->toString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevID_1getBufSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::RevID *arg1 = (CBF::RevID *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::RevID **)&jarg1; 
  result = (arg1)->getBufSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1RevIDBuffer_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CBF::RevIDBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CBF::RevIDBuffer *)new CBF::RevIDBuffer();
  *(CBF::RevIDBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1RevIDBuffer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Slice *arg1 = 0 ;
  CBF::RevIDBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Slice **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return 0;
  } 
  result = (CBF::RevIDBuffer *)new CBF::RevIDBuffer(*arg1);
  *(CBF::RevIDBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1RevIDBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::RevIDBuffer *arg1 = (CBF::RevIDBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::RevIDBuffer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevIDBuffer_1parse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CBF::RevIDBuffer *arg1 = (CBF::RevIDBuffer *) 0 ;
  CBF::Slice *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::RevIDBuffer **)&jarg1; 
  arg2 = *(CBF::Slice **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->parse(*arg2);
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1Revision(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CBF::Revision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CBF::Revision *)new CBF::Revision();
  *(CBF::Revision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Revision_1getOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Revision *arg1 = (CBF::Revision *) 0 ;
  CBF::RevTree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Revision **)&jarg1; 
  result = (CBF::RevTree *)(arg1)->getOwner();
  *(CBF::RevTree **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Revision_1getRevID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Revision *arg1 = (CBF::Revision *) 0 ;
  CBF::RevID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Revision **)&jarg1; 
  result = (CBF::RevID *)(arg1)->getRevID();
  *(CBF::RevID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Revision_1getSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  CBF::Revision *arg1 = (CBF::Revision *) 0 ;
  CBF::Sequence result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Revision **)&jarg1; 
  result = (CBF::Sequence)(arg1)->getSequence();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Revision_1isBodyAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::Revision *arg1 = (CBF::Revision *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Revision **)&jarg1; 
  result = (bool)((CBF::Revision const *)arg1)->isBodyAvailable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Revision_1readBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Revision *arg1 = (CBF::Revision *) 0 ;
  CBF::Slice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Revision **)&jarg1; 
  result = (CBF::Slice *)((CBF::Revision const *)arg1)->readBody();
  *(CBF::Slice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Revision_1isLeaf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::Revision *arg1 = (CBF::Revision *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Revision **)&jarg1; 
  result = (bool)((CBF::Revision const *)arg1)->isLeaf();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Revision_1isDeleted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::Revision *arg1 = (CBF::Revision *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Revision **)&jarg1; 
  result = (bool)((CBF::Revision const *)arg1)->isDeleted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Revision_1hasAttachments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::Revision *arg1 = (CBF::Revision *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Revision **)&jarg1; 
  result = (bool)((CBF::Revision const *)arg1)->hasAttachments();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Revision_1isNew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::Revision *arg1 = (CBF::Revision *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Revision **)&jarg1; 
  result = (bool)((CBF::Revision const *)arg1)->isNew();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Revision_1isActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::Revision *arg1 = (CBF::Revision *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Revision **)&jarg1; 
  result = (bool)((CBF::Revision const *)arg1)->isActive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Revision_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Revision *arg1 = (CBF::Revision *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Revision **)&jarg1; 
  result = (unsigned int)((CBF::Revision const *)arg1)->index();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Revision_1getParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Revision *arg1 = (CBF::Revision *) 0 ;
  CBF::Revision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Revision **)&jarg1; 
  result = (CBF::Revision *)((CBF::Revision const *)arg1)->getParent();
  *(CBF::Revision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Revision_1history(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Revision *arg1 = (CBF::Revision *) 0 ;
  std::vector< CBF::Revision * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Revision **)&jarg1; 
  result = ((CBF::Revision const *)arg1)->history();
  *(std::vector< CBF::Revision * > **)&jresult = new std::vector< CBF::Revision * >((const std::vector< CBF::Revision * > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Revision_1isSameAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  CBF::Revision *arg1 = (CBF::Revision *) 0 ;
  CBF::Revision *arg2 = (CBF::Revision *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::Revision **)&jarg1; 
  arg2 = *(CBF::Revision **)&jarg2; 
  result = (bool)(arg1)->isSameAddress(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1Revision(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::Revision *arg1 = (CBF::Revision *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::Revision **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1RevTree_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CBF::RevTree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CBF::RevTree *)new CBF::RevTree();
  *(CBF::RevTree **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1RevTree_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jobject jarg3) {
  jlong jresult = 0 ;
  CBF::Slice *arg1 = 0 ;
  CBF::Sequence arg2 ;
  uint64_t arg3 ;
  CBF::RevTree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Slice **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return 0;
  } 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (CBF::Sequence)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (CBF::RevTree *)new CBF::RevTree(*arg1,arg2,arg3);
  *(CBF::RevTree **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1RevTree(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::RevTree *arg1 = (CBF::RevTree *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::RevTree **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevTree_1decode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3, jobject jarg4) {
  CBF::RevTree *arg1 = (CBF::RevTree *) 0 ;
  CBF::Slice *arg2 = 0 ;
  CBF::Sequence arg3 ;
  uint64_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::RevTree **)&jarg1; 
  arg2 = *(CBF::Slice **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return ;
  } 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (CBF::Sequence)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    for(i=0; i<sz; i++) {
      arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      (arg1)->decode(*arg2,arg3,arg4);
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevTree_1encode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::RevTree *arg1 = (CBF::RevTree *) 0 ;
  CBF::Slice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::RevTree **)&jarg1; 
  result = (CBF::Slice *)(arg1)->encode();
  *(CBF::Slice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevTree_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::RevTree *arg1 = (CBF::RevTree *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::RevTree **)&jarg1; 
  result = ((CBF::RevTree const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevTree_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  CBF::RevTree *arg1 = (CBF::RevTree *) 0 ;
  unsigned int arg2 ;
  CBF::Revision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::RevTree **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (CBF::Revision *)((CBF::RevTree const *)arg1)->get(arg2);
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  *(CBF::Revision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevTree_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  CBF::RevTree *arg1 = (CBF::RevTree *) 0 ;
  CBF::RevID *arg2 = 0 ;
  CBF::Revision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::RevTree **)&jarg1; 
  arg2 = *(CBF::RevID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::RevID & reference is null");
    return 0;
  } 
  {
    try {
      result = (CBF::Revision *)((CBF::RevTree const *)arg1)->get(*arg2);
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  *(CBF::Revision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevTree_1getBySequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jlong jresult = 0 ;
  CBF::RevTree *arg1 = (CBF::RevTree *) 0 ;
  CBF::Sequence arg2 ;
  CBF::Revision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::RevTree **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (CBF::Sequence)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (CBF::Revision *)((CBF::RevTree const *)arg1)->getBySequence(arg2);
  *(CBF::Revision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevTree_1allRevisions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::RevTree *arg1 = (CBF::RevTree *) 0 ;
  std::vector< CBF::Revision * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::RevTree **)&jarg1; 
  result = ((CBF::RevTree const *)arg1)->allRevisions();
  *(std::vector< CBF::Revision * > **)&jresult = new std::vector< CBF::Revision * >((const std::vector< CBF::Revision * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevTree_1currentRevision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::RevTree *arg1 = (CBF::RevTree *) 0 ;
  CBF::Revision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::RevTree **)&jarg1; 
  result = (CBF::Revision *)(arg1)->currentRevision();
  *(CBF::Revision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevTree_1currentRevisions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::RevTree *arg1 = (CBF::RevTree *) 0 ;
  std::vector< CBF::Revision * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::RevTree **)&jarg1; 
  result = ((CBF::RevTree const *)arg1)->currentRevisions();
  *(std::vector< CBF::Revision * > **)&jresult = new std::vector< CBF::Revision * >((const std::vector< CBF::Revision * > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevTree_1hasConflict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::RevTree *arg1 = (CBF::RevTree *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::RevTree **)&jarg1; 
  result = (bool)((CBF::RevTree const *)arg1)->hasConflict();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevTree_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jboolean jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  jlong jresult = 0 ;
  CBF::RevTree *arg1 = (CBF::RevTree *) 0 ;
  CBF::RevID *arg2 = 0 ;
  CBF::Slice *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  CBF::RevID *arg6 = 0 ;
  bool arg7 ;
  CBF::Revision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg6_;
  arg1 = *(CBF::RevTree **)&jarg1; 
  arg2 = *(CBF::RevID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::RevID & reference is null");
    return 0;
  } 
  arg3 = *(CBF::Slice **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = *(CBF::RevID **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::RevID & reference is null");
    return 0;
  } 
  arg7 = jarg7 ? true : false; 
  result = (CBF::Revision *)(arg1)->insert(*arg2,*arg3,arg4,arg5,*arg6,arg7);
  *(CBF::Revision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevTree_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jboolean jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  jlong jresult = 0 ;
  CBF::RevTree *arg1 = (CBF::RevTree *) 0 ;
  CBF::RevID *arg2 = 0 ;
  CBF::Slice *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  CBF::Revision *arg6 = (CBF::Revision *) 0 ;
  bool arg7 ;
  CBF::Revision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg6_;
  arg1 = *(CBF::RevTree **)&jarg1; 
  arg2 = *(CBF::RevID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::RevID & reference is null");
    return 0;
  } 
  arg3 = *(CBF::Slice **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = *(CBF::Revision **)&jarg6; 
  arg7 = jarg7 ? true : false; 
  result = (CBF::Revision *)(arg1)->insert(*arg2,*arg3,arg4,arg5,arg6,arg7);
  *(CBF::Revision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevTree_1insertHistory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jboolean jarg5) {
  jint jresult = 0 ;
  CBF::RevTree *arg1 = (CBF::RevTree *) 0 ;
  std::vector< CBF::RevID * > arg2 ;
  CBF::Slice *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  std::vector< CBF::RevID * > *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CBF::RevTree **)&jarg1; 
  argp2 = *(std::vector< CBF::RevID * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< CBF::RevID * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(CBF::Slice **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (int)(arg1)->insertHistory(arg2,*arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevTree_1getLatestHttpStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CBF::RevTree *arg1 = (CBF::RevTree *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::RevTree **)&jarg1; 
  result = (int)(arg1)->getLatestHttpStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevTree_1prune(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  CBF::RevTree *arg1 = (CBF::RevTree *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::RevTree **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(arg1)->prune(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevTree_1purge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  CBF::RevTree *arg1 = (CBF::RevTree *) 0 ;
  CBF::RevID *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::RevTree **)&jarg1; 
  arg2 = *(CBF::RevID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::RevID & reference is null");
    return 0;
  } 
  result = (int)(arg1)->purge(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevTree_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CBF::RevTree *arg1 = (CBF::RevTree *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::RevTree **)&jarg1; 
  (arg1)->sort();
}


SWIGEXPORT jint JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VersionedDocument_1kDeleted_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CBF::VersionedDocument::kDeleted;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VersionedDocument_1kConflicted_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CBF::VersionedDocument::kConflicted;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VersionedDocument_1kHasAttachments_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CBF::VersionedDocument::kHasAttachments;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1VersionedDocument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  CBF::KeyStore *arg1 = 0 ;
  CBF::Slice *arg2 = 0 ;
  CBF::VersionedDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::KeyStore **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::KeyStore & reference is null");
    return 0;
  } 
  arg2 = *(CBF::Slice **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return 0;
  } 
  result = (CBF::VersionedDocument *)new CBF::VersionedDocument(*arg1,*arg2);
  *(CBF::VersionedDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1VersionedDocument_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  CBF::KeyStore *arg1 = 0 ;
  CBF::Document *arg2 = 0 ;
  CBF::VersionedDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::KeyStore **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::KeyStore & reference is null");
    return 0;
  } 
  arg2 = *(CBF::Document **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Document const & reference is null");
    return 0;
  } 
  result = (CBF::VersionedDocument *)new CBF::VersionedDocument(*arg1,(CBF::Document const &)*arg2);
  *(CBF::VersionedDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1VersionedDocument(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::VersionedDocument *arg1 = (CBF::VersionedDocument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::VersionedDocument **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VersionedDocument_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CBF::VersionedDocument *arg1 = (CBF::VersionedDocument *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::VersionedDocument **)&jarg1; 
  {
    try {
      (arg1)->read();
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VersionedDocument_1revsAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::VersionedDocument *arg1 = (CBF::VersionedDocument *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::VersionedDocument **)&jarg1; 
  result = (bool)((CBF::VersionedDocument const *)arg1)->revsAvailable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VersionedDocument_1getDocID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::VersionedDocument *arg1 = (CBF::VersionedDocument *) 0 ;
  CBF::Slice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::VersionedDocument **)&jarg1; 
  result = (CBF::Slice *)((CBF::VersionedDocument const *)arg1)->getDocID();
  *(CBF::Slice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VersionedDocument_1getRevID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::VersionedDocument *arg1 = (CBF::VersionedDocument *) 0 ;
  CBF::RevID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::VersionedDocument **)&jarg1; 
  result = (CBF::RevID *)((CBF::VersionedDocument const *)arg1)->getRevID();
  *(CBF::RevID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VersionedDocument_1getFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  CBF::VersionedDocument *arg1 = (CBF::VersionedDocument *) 0 ;
  CBF::VersionedDocument::Flags result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::VersionedDocument **)&jarg1; 
  result = (CBF::VersionedDocument::Flags)((CBF::VersionedDocument const *)arg1)->getFlags();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VersionedDocument_1isDeleted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::VersionedDocument *arg1 = (CBF::VersionedDocument *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::VersionedDocument **)&jarg1; 
  result = (bool)((CBF::VersionedDocument const *)arg1)->isDeleted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VersionedDocument_1isConflicted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::VersionedDocument *arg1 = (CBF::VersionedDocument *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::VersionedDocument **)&jarg1; 
  result = (bool)((CBF::VersionedDocument const *)arg1)->isConflicted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VersionedDocument_1hasAttachments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::VersionedDocument *arg1 = (CBF::VersionedDocument *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::VersionedDocument **)&jarg1; 
  result = (bool)((CBF::VersionedDocument const *)arg1)->hasAttachments();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VersionedDocument_1exists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::VersionedDocument *arg1 = (CBF::VersionedDocument *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::VersionedDocument **)&jarg1; 
  result = (bool)((CBF::VersionedDocument const *)arg1)->exists();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VersionedDocument_1getSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  CBF::VersionedDocument *arg1 = (CBF::VersionedDocument *) 0 ;
  CBF::Sequence result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::VersionedDocument **)&jarg1; 
  result = (CBF::Sequence)((CBF::VersionedDocument const *)arg1)->getSequence();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VersionedDocument_1getDocType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::VersionedDocument *arg1 = (CBF::VersionedDocument *) 0 ;
  CBF::Slice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::VersionedDocument **)&jarg1; 
  result = (CBF::Slice *)((CBF::VersionedDocument const *)arg1)->getDocType();
  *(CBF::Slice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VersionedDocument_1setDocType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CBF::VersionedDocument *arg1 = (CBF::VersionedDocument *) 0 ;
  CBF::Slice *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::VersionedDocument **)&jarg1; 
  arg2 = *(CBF::Slice **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return ;
  } 
  (arg1)->setDocType(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VersionedDocument_1changed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::VersionedDocument *arg1 = (CBF::VersionedDocument *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::VersionedDocument **)&jarg1; 
  result = (bool)((CBF::VersionedDocument const *)arg1)->changed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VersionedDocument_1save(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CBF::VersionedDocument *arg1 = (CBF::VersionedDocument *) 0 ;
  CBF::Transaction *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::VersionedDocument **)&jarg1; 
  arg2 = *(CBF::Transaction **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Transaction & reference is null");
    return ;
  } 
  (arg1)->save(*arg2);
}


SWIGEXPORT jshort JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VersionedDocument_1flagsOfDocument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  CBF::Document *arg1 = 0 ;
  CBF::VersionedDocument::Flags result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Document **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Document const & reference is null");
    return 0;
  } 
  result = (CBF::VersionedDocument::Flags)CBF::VersionedDocument::flagsOfDocument((CBF::Document const &)*arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VersionedDocument_1docTypeOfDocument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Document *arg1 = 0 ;
  CBF::Slice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Document **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Document const & reference is null");
    return 0;
  } 
  result = (CBF::Slice *)CBF::VersionedDocument::docTypeOfDocument((CBF::Document const &)*arg1);
  *(CBF::Slice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_CollatableTypes_1kEndSequence_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  CBF::CollatableTypes::Tag result;
  
  (void)jenv;
  (void)jcls;
  result = (CBF::CollatableTypes::Tag)CBF::CollatableTypes::kEndSequence;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_CollatableTypes_1kError_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  CBF::CollatableTypes::Tag result;
  
  (void)jenv;
  (void)jcls;
  result = (CBF::CollatableTypes::Tag)CBF::CollatableTypes::kError;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1CollatableTypes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CBF::CollatableTypes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CBF::CollatableTypes *)new CBF::CollatableTypes();
  *(CBF::CollatableTypes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1CollatableTypes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::CollatableTypes *arg1 = (CBF::CollatableTypes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::CollatableTypes **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1Collatable_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CBF::Collatable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CBF::Collatable *)new CBF::Collatable();
  *(CBF::Collatable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1Collatable_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  CBF::Collatable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (CBF::Collatable *)new CBF::Collatable(arg1);
  *(CBF::Collatable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1Collatable_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  CBF::Collatable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (CBF::Collatable *)new CBF::Collatable(arg1);
  *(CBF::Collatable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1Collatable_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  CBF::Collatable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (CBF::Collatable *)new CBF::Collatable((char const *)arg1);
  *(CBF::Collatable **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1Collatable_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Collatable *arg1 = 0 ;
  CBF::Collatable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Collatable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Collatable const & reference is null");
    return 0;
  } 
  result = (CBF::Collatable *)new CBF::Collatable((CBF::Collatable const &)*arg1);
  *(CBF::Collatable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1Collatable_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Slice *arg1 = 0 ;
  CBF::Collatable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Slice **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice const & reference is null");
    return 0;
  } 
  result = (CBF::Collatable *)new CBF::Collatable((CBF::Slice const &)*arg1);
  *(CBF::Collatable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1Collatable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::Collatable *arg1 = (CBF::Collatable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::Collatable **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Collatable_1addNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Collatable *arg1 = (CBF::Collatable *) 0 ;
  CBF::Collatable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Collatable **)&jarg1; 
  result = (CBF::Collatable *)(arg1)->addNull();
  *(CBF::Collatable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Collatable_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  CBF::Collatable *arg1 = (CBF::Collatable *) 0 ;
  bool arg2 ;
  CBF::Collatable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Collatable **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (CBF::Collatable *)(arg1)->add(arg2);
  *(CBF::Collatable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Collatable_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  CBF::Collatable *arg1 = (CBF::Collatable *) 0 ;
  double arg2 ;
  CBF::Collatable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Collatable **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (CBF::Collatable *)(arg1)->add(arg2);
  *(CBF::Collatable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Collatable_1add_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  CBF::Collatable *arg1 = (CBF::Collatable *) 0 ;
  CBF::Collatable *arg2 = 0 ;
  CBF::Collatable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::Collatable **)&jarg1; 
  arg2 = *(CBF::Collatable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Collatable const & reference is null");
    return 0;
  } 
  result = (CBF::Collatable *)(arg1)->add((CBF::Collatable const &)*arg2);
  *(CBF::Collatable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Collatable_1add_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CBF::Collatable *arg1 = (CBF::Collatable *) 0 ;
  char *arg2 = (char *) 0 ;
  CBF::Collatable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Collatable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (CBF::Collatable *)(arg1)->add((char const *)arg2);
  *(CBF::Collatable **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Collatable_1add_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  CBF::Collatable *arg1 = (CBF::Collatable *) 0 ;
  CBF::Slice *arg2 = 0 ;
  CBF::Collatable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::Collatable **)&jarg1; 
  arg2 = *(CBF::Slice **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice const & reference is null");
    return 0;
  } 
  result = (CBF::Collatable *)(arg1)->add((CBF::Slice const &)*arg2);
  *(CBF::Collatable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Collatable_1beginArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Collatable *arg1 = (CBF::Collatable *) 0 ;
  CBF::Collatable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Collatable **)&jarg1; 
  result = (CBF::Collatable *)(arg1)->beginArray();
  *(CBF::Collatable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Collatable_1endArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Collatable *arg1 = (CBF::Collatable *) 0 ;
  CBF::Collatable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Collatable **)&jarg1; 
  result = (CBF::Collatable *)(arg1)->endArray();
  *(CBF::Collatable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Collatable_1beginMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Collatable *arg1 = (CBF::Collatable *) 0 ;
  CBF::Collatable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Collatable **)&jarg1; 
  result = (CBF::Collatable *)(arg1)->beginMap();
  *(CBF::Collatable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Collatable_1endMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Collatable *arg1 = (CBF::Collatable *) 0 ;
  CBF::Collatable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Collatable **)&jarg1; 
  result = (CBF::Collatable *)(arg1)->endMap();
  *(CBF::Collatable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Collatable_1addSpecial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Collatable *arg1 = (CBF::Collatable *) 0 ;
  CBF::Collatable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Collatable **)&jarg1; 
  result = (CBF::Collatable *)(arg1)->addSpecial();
  *(CBF::Collatable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Collatable_1toSlice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Collatable *arg1 = (CBF::Collatable *) 0 ;
  CBF::Slice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Collatable **)&jarg1; 
  result = (CBF::Slice *)((CBF::Collatable const *)arg1)->toSlice();
  *(CBF::Slice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Collatable_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Collatable *arg1 = (CBF::Collatable *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Collatable **)&jarg1; 
  result = ((CBF::Collatable const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Collatable_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::Collatable *arg1 = (CBF::Collatable *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Collatable **)&jarg1; 
  result = (bool)((CBF::Collatable const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Collatable_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CBF::Collatable *arg1 = (CBF::Collatable *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Collatable **)&jarg1; 
  result = (arg1)->dump();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1CollatableReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Slice *arg1 = 0 ;
  CBF::CollatableReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Slice **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice const & reference is null");
    return 0;
  } 
  result = (CBF::CollatableReader *)new CBF::CollatableReader((CBF::Slice const &)*arg1);
  *(CBF::CollatableReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1CollatableReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::CollatableReader *arg1 = (CBF::CollatableReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::CollatableReader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_CollatableReader_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::CollatableReader *arg1 = (CBF::CollatableReader *) 0 ;
  CBF::Slice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::CollatableReader **)&jarg1; 
  result = (CBF::Slice *)((CBF::CollatableReader const *)arg1)->data();
  *(CBF::Slice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_CollatableReader_1peekTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CBF::CollatableReader *arg1 = (CBF::CollatableReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::CollatableReader **)&jarg1; 
  result = (int)(arg1)->peekTag();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_CollatableReader_1readInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::CollatableReader *arg1 = (CBF::CollatableReader *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::CollatableReader **)&jarg1; 
  {
    try {
      result = (int64_t)(arg1)->readInt();
    } catch (char const *err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, err);
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_CollatableReader_1readDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CBF::CollatableReader *arg1 = (CBF::CollatableReader *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::CollatableReader **)&jarg1; 
  {
    try {
      result = (double)(arg1)->readDouble();
    } catch (char const *err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, err);
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_CollatableReader_1readString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::CollatableReader *arg1 = (CBF::CollatableReader *) 0 ;
  CBF::Slice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::CollatableReader **)&jarg1; 
  {
    try {
      result = (CBF::Slice *)(arg1)->readString();
    } catch (char const *err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, err);
      return 0;
    }
  }
  *(CBF::Slice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_CollatableReader_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::CollatableReader *arg1 = (CBF::CollatableReader *) 0 ;
  CBF::Slice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::CollatableReader **)&jarg1; 
  {
    try {
      result = (CBF::Slice *)(arg1)->read();
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  *(CBF::Slice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_CollatableReader_1beginArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CBF::CollatableReader *arg1 = (CBF::CollatableReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::CollatableReader **)&jarg1; 
  (arg1)->beginArray();
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_CollatableReader_1endArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CBF::CollatableReader *arg1 = (CBF::CollatableReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::CollatableReader **)&jarg1; 
  (arg1)->endArray();
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_CollatableReader_1beginMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CBF::CollatableReader *arg1 = (CBF::CollatableReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::CollatableReader **)&jarg1; 
  (arg1)->beginMap();
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_CollatableReader_1endMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CBF::CollatableReader *arg1 = (CBF::CollatableReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::CollatableReader **)&jarg1; 
  (arg1)->endMap();
}


SWIGEXPORT jstring JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_CollatableReader_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CBF::CollatableReader *arg1 = (CBF::CollatableReader *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::CollatableReader **)&jarg1; 
  result = (arg1)->dump();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1KeyRange_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  CBF::Collatable *arg1 = 0 ;
  CBF::Collatable *arg2 = 0 ;
  bool arg3 ;
  CBF::KeyRange *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::Collatable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Collatable & reference is null");
    return 0;
  } 
  arg2 = *(CBF::Collatable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Collatable & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (CBF::KeyRange *)new CBF::KeyRange(*arg1,*arg2,arg3);
  *(CBF::KeyRange **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1KeyRange_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  CBF::Collatable *arg1 = 0 ;
  CBF::Collatable *arg2 = 0 ;
  CBF::KeyRange *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::Collatable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Collatable & reference is null");
    return 0;
  } 
  arg2 = *(CBF::Collatable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Collatable & reference is null");
    return 0;
  } 
  result = (CBF::KeyRange *)new CBF::KeyRange(*arg1,*arg2);
  *(CBF::KeyRange **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1KeyRange_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Collatable *arg1 = 0 ;
  CBF::KeyRange *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Collatable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Collatable & reference is null");
    return 0;
  } 
  result = (CBF::KeyRange *)new CBF::KeyRange(*arg1);
  *(CBF::KeyRange **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1KeyRange_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::KeyRange *arg1 = 0 ;
  CBF::KeyRange *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::KeyRange **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::KeyRange const & reference is null");
    return 0;
  } 
  result = (CBF::KeyRange *)new CBF::KeyRange((CBF::KeyRange const &)*arg1);
  *(CBF::KeyRange **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KeyRange_1isKeyPastEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  CBF::KeyRange *arg1 = (CBF::KeyRange *) 0 ;
  CBF::Slice *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::KeyRange **)&jarg1; 
  arg2 = *(CBF::Slice **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return 0;
  } 
  result = (bool)((CBF::KeyRange const *)arg1)->isKeyPastEnd(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1KeyRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::KeyRange *arg1 = (CBF::KeyRange *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::KeyRange **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1Index_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CBF::Database *arg1 = 0 ;
  std::string arg2 ;
  CBF::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Database **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Database & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (CBF::Index *)new CBF::Index(*arg1,arg2);
  *(CBF::Index **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1Index(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::Index *arg1 = (CBF::Index *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::Index **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1IndexWriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  CBF::Index *arg1 = 0 ;
  CBF::Transaction *arg2 = 0 ;
  CBF::IndexWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::Index **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Index & reference is null");
    return 0;
  } 
  arg2 = *(CBF::Transaction **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Transaction & reference is null");
    return 0;
  } 
  result = (CBF::IndexWriter *)new CBF::IndexWriter(*arg1,*arg2);
  *(CBF::IndexWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1IndexWriter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::IndexWriter *arg1 = (CBF::IndexWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::IndexWriter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_IndexWriter_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  CBF::IndexWriter *arg1 = (CBF::IndexWriter *) 0 ;
  CBF::Slice *arg2 = 0 ;
  CBF::Sequence arg3 ;
  std::vector< CBF::Collatable > arg4 ;
  std::vector< CBF::Collatable > arg5 ;
  std::vector< CBF::Collatable > *argp4 ;
  std::vector< CBF::Collatable > *argp5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(CBF::IndexWriter **)&jarg1; 
  arg2 = *(CBF::Slice **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return 0;
  } 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (CBF::Sequence)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  argp4 = *(std::vector< CBF::Collatable > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< CBF::Collatable >");
    return 0;
  }
  arg4 = *argp4; 
  argp5 = *(std::vector< CBF::Collatable > **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< CBF::Collatable >");
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)(arg1)->update(*arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_IndexWriter_1getRowCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  CBF::IndexWriter *arg1 = (CBF::IndexWriter *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::IndexWriter **)&jarg1; 
  result = (uint64_t)(arg1)->getRowCount();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_IndexWriter_1setRowCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  CBF::IndexWriter *arg1 = (CBF::IndexWriter *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::IndexWriter **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  (arg1)->setRowCount(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1IndexEnumerator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  CBF::Index *arg1 = 0 ;
  CBF::Collatable *arg2 = 0 ;
  CBF::Slice *arg3 = 0 ;
  CBF::Collatable *arg4 = 0 ;
  CBF::Slice *arg5 = 0 ;
  CBF::DocEnumerator::Options arg6 ;
  CBF::DocEnumerator::Options const *argp6 ;
  CBF::IndexEnumerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(CBF::Index **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Index & reference is null");
    return 0;
  } 
  arg2 = *(CBF::Collatable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Collatable & reference is null");
    return 0;
  } 
  arg3 = *(CBF::Slice **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return 0;
  } 
  arg4 = *(CBF::Collatable **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Collatable & reference is null");
    return 0;
  } 
  arg5 = *(CBF::Slice **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Slice & reference is null");
    return 0;
  } 
  argp6 = *(CBF::DocEnumerator::Options **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CBF::DocEnumerator::Options const");
    return 0;
  }
  arg6 = *argp6; 
  result = (CBF::IndexEnumerator *)new CBF::IndexEnumerator(*arg1,*arg2,*arg3,*arg4,*arg5,arg6);
  *(CBF::IndexEnumerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1IndexEnumerator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  CBF::Index *arg1 = 0 ;
  std::vector< CBF::KeyRange * > arg2 ;
  CBF::DocEnumerator::Options arg3 ;
  std::vector< CBF::KeyRange * > *argp2 ;
  CBF::DocEnumerator::Options const *argp3 ;
  CBF::IndexEnumerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CBF::Index **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Index & reference is null");
    return 0;
  } 
  argp2 = *(std::vector< CBF::KeyRange * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< CBF::KeyRange * >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(CBF::DocEnumerator::Options **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CBF::DocEnumerator::Options const");
    return 0;
  }
  arg3 = *argp3; 
  result = (CBF::IndexEnumerator *)new CBF::IndexEnumerator(*arg1,arg2,arg3);
  *(CBF::IndexEnumerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_IndexEnumerator_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::IndexEnumerator *arg1 = (CBF::IndexEnumerator *) 0 ;
  CBF::CollatableReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::IndexEnumerator **)&jarg1; 
  result = (CBF::CollatableReader *)((CBF::IndexEnumerator const *)arg1)->key();
  *(CBF::CollatableReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_IndexEnumerator_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::IndexEnumerator *arg1 = (CBF::IndexEnumerator *) 0 ;
  CBF::CollatableReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::IndexEnumerator **)&jarg1; 
  result = (CBF::CollatableReader *)((CBF::IndexEnumerator const *)arg1)->value();
  *(CBF::CollatableReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_IndexEnumerator_1docID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::IndexEnumerator *arg1 = (CBF::IndexEnumerator *) 0 ;
  CBF::Slice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::IndexEnumerator **)&jarg1; 
  result = (CBF::Slice *)((CBF::IndexEnumerator const *)arg1)->docID();
  *(CBF::Slice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_IndexEnumerator_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  CBF::IndexEnumerator *arg1 = (CBF::IndexEnumerator *) 0 ;
  CBF::Sequence result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::IndexEnumerator **)&jarg1; 
  result = (CBF::Sequence)((CBF::IndexEnumerator const *)arg1)->sequence();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_IndexEnumerator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::IndexEnumerator *arg1 = (CBF::IndexEnumerator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::IndexEnumerator **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->next();
    } catch (forestdb::error err) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      char buff[64];
      sprintf(buff, "%d", err.status);
      jenv->ThrowNew(clazz, buff);
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1IndexEnumerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::IndexEnumerator *arg1 = (CBF::IndexEnumerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::IndexEnumerator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1Mappable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::Document *arg1 = 0 ;
  CBF::Mappable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::Document **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Document const & reference is null");
    return 0;
  } 
  result = (CBF::Mappable *)new CBF::Mappable((CBF::Document const &)*arg1);
  *(CBF::Mappable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1Mappable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::Mappable *arg1 = (CBF::Mappable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::Mappable **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1EmitFn(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::EmitFn *arg1 = (CBF::EmitFn *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::EmitFn **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_EmitFn_1call(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CBF::EmitFn *arg1 = (CBF::EmitFn *) 0 ;
  CBF::Collatable *arg2 = 0 ;
  CBF::Collatable *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CBF::EmitFn **)&jarg1; 
  arg2 = *(CBF::Collatable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Collatable & reference is null");
    return ;
  } 
  arg3 = *(CBF::Collatable **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Collatable & reference is null");
    return ;
  } 
  (arg1)->call(*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1MapFn(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::MapFn *arg1 = (CBF::MapFn *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::MapFn **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_MapFn_1call(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CBF::MapFn *arg1 = (CBF::MapFn *) 0 ;
  CBF::Mappable *arg2 = 0 ;
  CBF::EmitFn *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CBF::MapFn **)&jarg1; 
  arg2 = *(CBF::Mappable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Mappable const & reference is null");
    return ;
  } 
  arg3 = *(CBF::EmitFn **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::EmitFn & reference is null");
    return ;
  } 
  (arg1)->call((CBF::Mappable const &)*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_MapFn_1callSwigExplicitMapFn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CBF::MapFn *arg1 = (CBF::MapFn *) 0 ;
  CBF::Mappable *arg2 = 0 ;
  CBF::EmitFn *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CBF::MapFn **)&jarg1; 
  arg2 = *(CBF::Mappable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Mappable const & reference is null");
    return ;
  } 
  arg3 = *(CBF::EmitFn **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::EmitFn & reference is null");
    return ;
  } 
  (arg1)->CBF::MapFn::call((CBF::Mappable const &)*arg2,*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1MapFn(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CBF::MapFn *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CBF::MapFn *)new SwigDirector_MapFn(jenv);
  *(CBF::MapFn **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_MapFn_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  CBF::MapFn *obj = *((CBF::MapFn **)&objarg);
  (void)jcls;
  SwigDirector_MapFn *director = dynamic_cast<SwigDirector_MapFn *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_MapFn_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  CBF::MapFn *obj = *((CBF::MapFn **)&objarg);
  SwigDirector_MapFn *director = dynamic_cast<SwigDirector_MapFn *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1MapReduceIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  CBF::Database *arg1 = 0 ;
  std::string arg2 ;
  CBF::KeyStore *arg3 = 0 ;
  CBF::MapReduceIndex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(CBF::Database **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Database & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(CBF::KeyStore **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::KeyStore & reference is null");
    return 0;
  } 
  result = (CBF::MapReduceIndex *)new CBF::MapReduceIndex(*arg1,arg2,*arg3);
  *(CBF::MapReduceIndex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1MapReduceIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::MapReduceIndex *arg1 = (CBF::MapReduceIndex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::MapReduceIndex **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_MapReduceIndex_1sourceStore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CBF::MapReduceIndex *arg1 = (CBF::MapReduceIndex *) 0 ;
  CBF::KeyStore *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::MapReduceIndex **)&jarg1; 
  result = (CBF::KeyStore *)((CBF::MapReduceIndex const *)arg1)->sourceStore();
  *(CBF::KeyStore **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_MapReduceIndex_1readState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CBF::MapReduceIndex *arg1 = (CBF::MapReduceIndex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::MapReduceIndex **)&jarg1; 
  (arg1)->readState();
}


SWIGEXPORT jint JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_MapReduceIndex_1indexType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CBF::MapReduceIndex *arg1 = (CBF::MapReduceIndex *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::MapReduceIndex **)&jarg1; 
  result = (int)(arg1)->indexType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_MapReduceIndex_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jstring jarg5) {
  CBF::MapReduceIndex *arg1 = (CBF::MapReduceIndex *) 0 ;
  CBF::Transaction *arg2 = 0 ;
  int arg3 ;
  CBF::MapFn *arg4 = (CBF::MapFn *) 0 ;
  std::string arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(CBF::MapReduceIndex **)&jarg1; 
  arg2 = *(CBF::Transaction **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Transaction & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = *(CBF::MapFn **)&jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->setup(*arg2,arg3,arg4,arg5);
}


SWIGEXPORT jobject JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_MapReduceIndex_1lastSequenceIndexed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  CBF::MapReduceIndex *arg1 = (CBF::MapReduceIndex *) 0 ;
  CBF::Sequence result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::MapReduceIndex **)&jarg1; 
  result = (CBF::Sequence)((CBF::MapReduceIndex const *)arg1)->lastSequenceIndexed();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_MapReduceIndex_1lastSequenceChangedAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  CBF::MapReduceIndex *arg1 = (CBF::MapReduceIndex *) 0 ;
  CBF::Sequence result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::MapReduceIndex **)&jarg1; 
  result = (CBF::Sequence)((CBF::MapReduceIndex const *)arg1)->lastSequenceChangedAt();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_MapReduceIndex_1rowCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  CBF::MapReduceIndex *arg1 = (CBF::MapReduceIndex *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::MapReduceIndex **)&jarg1; 
  result = (uint64_t)((CBF::MapReduceIndex const *)arg1)->rowCount();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_MapReduceIndex_1erase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CBF::MapReduceIndex *arg1 = (CBF::MapReduceIndex *) 0 ;
  CBF::Transaction *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::MapReduceIndex **)&jarg1; 
  arg2 = *(CBF::Transaction **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Transaction & reference is null");
    return ;
  } 
  (arg1)->erase(*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_new_1MapReduceIndexer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CBF::MapReduceIndexer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CBF::MapReduceIndexer *)new SwigDirector_MapReduceIndexer(jenv);
  *(CBF::MapReduceIndexer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_delete_1MapReduceIndexer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CBF::MapReduceIndexer *arg1 = (CBF::MapReduceIndexer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CBF::MapReduceIndexer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_MapReduceIndexer_1addIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CBF::MapReduceIndexer *arg1 = (CBF::MapReduceIndexer *) 0 ;
  CBF::MapReduceIndex *arg2 = (CBF::MapReduceIndex *) 0 ;
  CBF::Transaction *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CBF::MapReduceIndexer **)&jarg1; 
  arg2 = *(CBF::MapReduceIndex **)&jarg2; 
  arg3 = *(CBF::Transaction **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Transaction & reference is null");
    return ;
  } 
  (arg1)->addIndex(arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_MapReduceIndexer_1triggerOnIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CBF::MapReduceIndexer *arg1 = (CBF::MapReduceIndexer *) 0 ;
  CBF::MapReduceIndex *arg2 = (CBF::MapReduceIndex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::MapReduceIndexer **)&jarg1; 
  arg2 = *(CBF::MapReduceIndex **)&jarg2; 
  (arg1)->triggerOnIndex(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_MapReduceIndexer_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CBF::MapReduceIndexer *arg1 = (CBF::MapReduceIndexer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CBF::MapReduceIndexer **)&jarg1; 
  result = (bool)(arg1)->run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_MapReduceIndexer_1addDocument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CBF::MapReduceIndexer *arg1 = (CBF::MapReduceIndexer *) 0 ;
  CBF::Document *arg2 = (CBF::Document *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::MapReduceIndexer **)&jarg1; 
  arg2 = *(CBF::Document **)&jarg2; 
  (arg1)->addDocument((CBF::Document const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_MapReduceIndexer_1addDocumentSwigExplicitMapReduceIndexer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CBF::MapReduceIndexer *arg1 = (CBF::MapReduceIndexer *) 0 ;
  CBF::Document *arg2 = (CBF::Document *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::MapReduceIndexer **)&jarg1; 
  arg2 = *(CBF::Document **)&jarg2; 
  (arg1)->CBF::MapReduceIndexer::addDocument((CBF::Document const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_MapReduceIndexer_1addMappable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CBF::MapReduceIndexer *arg1 = (CBF::MapReduceIndexer *) 0 ;
  CBF::Mappable *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CBF::MapReduceIndexer **)&jarg1; 
  arg2 = *(CBF::Mappable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CBF::Mappable const & reference is null");
    return ;
  } 
  (arg1)->addMappable((CBF::Mappable const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_MapReduceIndexer_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  CBF::MapReduceIndexer *obj = *((CBF::MapReduceIndexer **)&objarg);
  (void)jcls;
  SwigDirector_MapReduceIndexer *director = dynamic_cast<SwigDirector_MapReduceIndexer *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_MapReduceIndexer_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  CBF::MapReduceIndexer *obj = *((CBF::MapReduceIndexer **)&objarg);
  SwigDirector_MapReduceIndexer *director = dynamic_cast<SwigDirector_MapReduceIndexer *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_KeyStoreWriter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(CBF::KeyStore **)&baseptr = *(CBF::KeyStoreWriter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Database_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(CBF::KeyStore **)&baseptr = *(CBF::Database **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_Transaction_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(CBF::KeyStoreWriter **)&baseptr = *(CBF::Transaction **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevID_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(CBF::Slice **)&baseptr = *(CBF::RevID **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_RevIDBuffer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(CBF::RevID **)&baseptr = *(CBF::RevIDBuffer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_VersionedDocument_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(CBF::RevTree **)&baseptr = *(CBF::VersionedDocument **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_MapReduceIndex_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(CBF::Index **)&baseptr = *(CBF::MapReduceIndex **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_com_couchbase_lite_cbforest_cbforestJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[2] = {
    {
      "SwigDirector_MapFn_call", "(Lcom/couchbase/lite/cbforest/MapFn;JJ)V" 
    },
    {
      "SwigDirector_MapReduceIndexer_addDocument", "(Lcom/couchbase/lite/cbforest/MapReduceIndexer;J)V" 
    }
  };
  Swig::jclass_cbforestJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_cbforestJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

